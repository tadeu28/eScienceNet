/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package juniorvs.virtualdir.desktop;

import com.esciencenet.forms.*;
import com.esciencenet.semanticmanager.*;
import java.awt.Image;
import java.awt.Toolkit;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.AbstractTableModel;
import juniorvs.virtualdir.ConteudoDownload;
import juniorvs.virtualdir.ConteudoRemoto;
import juniorvs.virtualdir.ControlaMensagens;
import juniorvs.virtualdir.EventoDescoberta;
import juniorvs.virtualdir.GerenciaProcura;
import juniorvs.virtualdir.Mensagem;
import juniorvs.virtualdir.OuvinteDescoberta;
import juniorvs.virtualdir.OuvinteMensagem;
import juniorvs.virtualdir.Peer;
import juniorvs.virtualdir.Peers;
import juniorvs.virtualdir.ext.*;
import net.jxta.ext.config.Configurator;
import net.jxta.impl.config.Config;
import net.jxta.instantp2p.util.PreferenceReader;
import net.jxta.peergroup.PeerGroup;
import net.jxta.peergroup.PeerGroupFactory;
import net.jxta.protocol.PeerGroupAdvertisement;
import net.jxta.rendezvous.RendezVousService;
import net.jxta.rendezvous.RendezvousEvent;
import net.jxta.rendezvous.RendezvousListener;
import net.jxta.share.CMS;
import net.jxta.share.ContentAdvertisement;
import net.jxta.share.FileContent;

/**
 * Classe fundamental para a execução da e-ScienceNet
 * 
 * @author Tadeu Classe
 */
public class VirtualDir extends JFrame implements Runnable,
                                                  RendezvousListener,
                                                  OuvinteMensagem,
                                                  ListSelectionListener,
                                                  OuvinteDescoberta,
                                                  ConteudoDownload,
                                                  Mensagem{

    /**
     * Método contrutor da classe
     */
    public VirtualDir() {
        super("myJXTA");
        setLocationRelativeTo(null);
        initComponents();  
        
        Image icon = Toolkit.getDefaultToolkit().getImage(getClass().getResource("/images/esciencenet2.png"));
        setIconImage(icon);
        initialize();
    }
    
    private void initialize() {  
        //Inicialização dos modelos das tabelas
        tableArquivos.setModel(modelArquivos);
        tablePeers.setModel(modelPeers);

        //seto o ouvinte da tabela de nós
        tablePeers.getSelectionModel().addListSelectionListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popMenuArquivos = new javax.swing.JPopupMenu();
        menuItemCopiar = new javax.swing.JMenuItem();
        gpbEscopo = new javax.swing.ButtonGroup();
        gpbBusca = new javax.swing.ButtonGroup();
        statusBar = new javax.swing.JPanel();
        lbleScienceNet = new javax.swing.JLabel();
        lblUsuario = new javax.swing.JLabel();
        jLabelFileShared = new javax.swing.JLabel();
        pnlAllComponent = new javax.swing.JPanel();
        pnlMain = new javax.swing.JPanel();
        sptPanelMain = new javax.swing.JSplitPane();
        pnlPesquisa = new javax.swing.JPanel();
        pnlEscopo = new javax.swing.JPanel();
        rdbPeerLocal = new javax.swing.JRadioButton();
        rdbNosRede = new javax.swing.JRadioButton();
        rdbTodosPeers = new javax.swing.JRadioButton();
        pnlBusca = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        edtPesquisa = new javax.swing.JTextField();
        btnPesquisa = new javax.swing.JButton();
        rdbServicos = new javax.swing.JRadioButton();
        rdbRecursos = new javax.swing.JRadioButton();
        rdbTodos = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        pnlP2P = new javax.swing.JPanel();
        pnlPonto = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablePeers = new javax.swing.JTable();
        pnlArquivos = new javax.swing.JPanel();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableArquivos = new javax.swing.JTable();
        pnlMainInfo = new javax.swing.JPanel();
        pnlSplit = new javax.swing.JPanel();
        lblSplit = new javax.swing.JLabel();
        btnLimparInfo = new javax.swing.JButton();
        pnlSul = new javax.swing.JPanel();
        pnlEnviaMsg = new javax.swing.JPanel();
        jLabelEnviaMensagem = new javax.swing.JLabel();
        jTextFieldEnviaMensagem = new javax.swing.JTextField();
        pnlInformacao = new javax.swing.JPanel();
        jScrollPaneInfo = new javax.swing.JScrollPane();
        jTextAreaInfo = new javax.swing.JTextArea();
        mnuEScienceNet = new javax.swing.JMenuBar();
        actArquivo = new javax.swing.JMenu();
        actConfig = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        actSair = new javax.swing.JMenuItem();
        actGrupos = new javax.swing.JMenu();
        actSelectGroup = new javax.swing.JMenuItem();
        actSobre = new javax.swing.JMenu();

        menuItemCopiar.setText("Copiar Conteúdo...");
        menuItemCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCopiarActionPerformed(evt);
            }
        });
        popMenuArquivos.add(menuItemCopiar);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle(".: e-ScienceNet :.");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        statusBar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        statusBar.setLayout(new javax.swing.BoxLayout(statusBar, javax.swing.BoxLayout.LINE_AXIS));

        lbleScienceNet.setText("e-ScienceNet | ");
        statusBar.add(lbleScienceNet);

        lblUsuario.setText("Usuário |");
        statusBar.add(lblUsuario);

        jLabelFileShared.setText(" Diretório de Compartilhamento");
        statusBar.add(jLabelFileShared);

        getContentPane().add(statusBar, java.awt.BorderLayout.SOUTH);

        pnlAllComponent.setLayout(new java.awt.BorderLayout());

        pnlMain.setBackground(new java.awt.Color(102, 0, 204));
        pnlMain.setLayout(new java.awt.BorderLayout());

        sptPanelMain.setDividerLocation(250);
        sptPanelMain.setDividerSize(20);
        sptPanelMain.setLastDividerLocation(250);
        sptPanelMain.setOneTouchExpandable(true);

        pnlPesquisa.setMinimumSize(new java.awt.Dimension(250, 100));

        pnlEscopo.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Escopo ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.Color.black));

        gpbEscopo.add(rdbPeerLocal);
        rdbPeerLocal.setText("Peer Local");

        gpbEscopo.add(rdbNosRede);
        rdbNosRede.setText("Peer de Rede");

        gpbEscopo.add(rdbTodosPeers);
        rdbTodosPeers.setSelected(true);
        rdbTodosPeers.setText("Todos os Peers");

        javax.swing.GroupLayout pnlEscopoLayout = new javax.swing.GroupLayout(pnlEscopo);
        pnlEscopo.setLayout(pnlEscopoLayout);
        pnlEscopoLayout.setHorizontalGroup(
            pnlEscopoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEscopoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlEscopoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rdbPeerLocal)
                    .addComponent(rdbNosRede)
                    .addComponent(rdbTodosPeers))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlEscopoLayout.setVerticalGroup(
            pnlEscopoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlEscopoLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rdbPeerLocal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbNosRede)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbTodosPeers))
        );

        pnlBusca.setBorder(javax.swing.BorderFactory.createTitledBorder(null, " Busca ", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, java.awt.Color.black));

        jLabel1.setText("Conteúdo de Pesquisa");

        btnPesquisa.setText("Pesquisar");

        gpbBusca.add(rdbServicos);
        rdbServicos.setText("Serviços");

        gpbBusca.add(rdbRecursos);
        rdbRecursos.setText("Recursos e Arquivos");

        gpbBusca.add(rdbTodos);
        rdbTodos.setText("Todos");

        javax.swing.GroupLayout pnlBuscaLayout = new javax.swing.GroupLayout(pnlBusca);
        pnlBusca.setLayout(pnlBuscaLayout);
        pnlBuscaLayout.setHorizontalGroup(
            pnlBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBuscaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(edtPesquisa)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlBuscaLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlBuscaLayout.createSequentialGroup()
                        .addGroup(pnlBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rdbTodos)
                            .addComponent(rdbRecursos)
                            .addComponent(jLabel1)
                            .addComponent(rdbServicos))
                        .addGap(0, 44, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlBuscaLayout.setVerticalGroup(
            pnlBuscaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBuscaLayout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(edtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnPesquisa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbServicos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbRecursos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbTodos))
        );

        jButton1.setText("jButton1");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlPesquisaLayout = new javax.swing.GroupLayout(pnlPesquisa);
        pnlPesquisa.setLayout(pnlPesquisaLayout);
        pnlPesquisaLayout.setHorizontalGroup(
            pnlPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPesquisaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlEscopo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlBusca, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(pnlPesquisaLayout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(pnlPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlPesquisaLayout.setVerticalGroup(
            pnlPesquisaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPesquisaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlEscopo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlBusca, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(4, 4, 4)
                .addComponent(jButton2))
        );

        sptPanelMain.setLeftComponent(pnlPesquisa);

        pnlP2P.setLayout(new java.awt.BorderLayout());

        pnlPonto.setPreferredSize(new java.awt.Dimension(160, 419));
        pnlPonto.setLayout(new java.awt.BorderLayout());

        tablePeers.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablePeers);

        pnlPonto.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        pnlP2P.add(pnlPonto, java.awt.BorderLayout.WEST);

        pnlArquivos.setLayout(new java.awt.BorderLayout());

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setPreferredSize(new java.awt.Dimension(7, 2));
        pnlArquivos.add(jSeparator2, java.awt.BorderLayout.WEST);

        tableArquivos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tableArquivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tableArquivosMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tableArquivos);

        pnlArquivos.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        pnlP2P.add(pnlArquivos, java.awt.BorderLayout.CENTER);

        sptPanelMain.setRightComponent(pnlP2P);

        pnlMain.add(sptPanelMain, java.awt.BorderLayout.CENTER);

        pnlAllComponent.add(pnlMain, java.awt.BorderLayout.CENTER);

        pnlMainInfo.setBackground(new java.awt.Color(102, 255, 0));
        pnlMainInfo.setLayout(new java.awt.BorderLayout());

        pnlSplit.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        pnlSplit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pnlSplitMouseClicked(evt);
            }
        });
        pnlSplit.setLayout(new javax.swing.BoxLayout(pnlSplit, javax.swing.BoxLayout.LINE_AXIS));

        lblSplit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/down.png"))); // NOI18N
        lblSplit.setText(" ");
        pnlSplit.add(lblSplit);

        btnLimparInfo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/limpar.png"))); // NOI18N
        btnLimparInfo.setText("Limpar Informações");
        btnLimparInfo.setPreferredSize(new java.awt.Dimension(167, 20));
        btnLimparInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparInfoActionPerformed(evt);
            }
        });
        pnlSplit.add(btnLimparInfo);

        pnlMainInfo.add(pnlSplit, java.awt.BorderLayout.NORTH);

        pnlSul.setBackground(new java.awt.Color(153, 0, 153));
        pnlSul.setPreferredSize(new java.awt.Dimension(922, 150));
        pnlSul.setLayout(new java.awt.BorderLayout());

        pnlEnviaMsg.setLayout(new javax.swing.BoxLayout(pnlEnviaMsg, javax.swing.BoxLayout.LINE_AXIS));

        jLabelEnviaMensagem.setText("Mensagem: ");
        pnlEnviaMsg.add(jLabelEnviaMensagem);

        jTextFieldEnviaMensagem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextFieldEnviaMensagemActionPerformed(evt);
            }
        });
        pnlEnviaMsg.add(jTextFieldEnviaMensagem);

        pnlSul.add(pnlEnviaMsg, java.awt.BorderLayout.SOUTH);

        pnlInformacao.setBorder(javax.swing.BorderFactory.createTitledBorder(" Informação "));
        pnlInformacao.setLayout(new java.awt.BorderLayout());

        jTextAreaInfo.setEditable(false);
        jTextAreaInfo.setColumns(20);
        jTextAreaInfo.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        jTextAreaInfo.setRows(5);
        jTextAreaInfo.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jScrollPaneInfo.setViewportView(jTextAreaInfo);

        pnlInformacao.add(jScrollPaneInfo, java.awt.BorderLayout.CENTER);

        pnlSul.add(pnlInformacao, java.awt.BorderLayout.CENTER);

        pnlMainInfo.add(pnlSul, java.awt.BorderLayout.SOUTH);

        pnlAllComponent.add(pnlMainInfo, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(pnlAllComponent, java.awt.BorderLayout.CENTER);

        actArquivo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/arquivo.png"))); // NOI18N
        actArquivo.setText("Arquivo");

        actConfig.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Config.png"))); // NOI18N
        actConfig.setText("Configurações");
        actArquivo.add(actConfig);
        actArquivo.add(jSeparator1);

        actSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sair.png"))); // NOI18N
        actSair.setText("Sair");
        actSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actSairActionPerformed(evt);
            }
        });
        actArquivo.add(actSair);

        mnuEScienceNet.add(actArquivo);

        actGrupos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/groups.png"))); // NOI18N
        actGrupos.setText("Grupos");

        actSelectGroup.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/groupSelected.png"))); // NOI18N
        actSelectGroup.setText("Selecionar Grupo");
        actSelectGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actSelectGroupActionPerformed(evt);
            }
        });
        actGrupos.add(actSelectGroup);

        mnuEScienceNet.add(actGrupos);

        actSobre.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/sobre.png"))); // NOI18N
        actSobre.setText("Sobre...");
        actSobre.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                actSobreMouseClicked(evt);
            }
        });
        actSobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                actSobreActionPerformed(evt);
            }
        });
        mnuEScienceNet.add(actSobre);

        setJMenuBar(mnuEScienceNet);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-940)/2, (screenSize.height-686)/2, 940, 686);
    }// </editor-fold>//GEN-END:initComponents

    private void actSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actSairActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Deseja realmente se desconectar da e-ScienceNet?", ".: e-ScienceNet :.", JOptionPane.YES_NO_OPTION, 
                                      JOptionPane.QUESTION_MESSAGE, (new javax.swing.ImageIcon(getClass().getResource("/images/question.png")))) == 0){
            //informo aos demais nos que este aqui abandonou a rede
            controlaMensagens.saidaPeer();
            //finalizo o sistema
            System.exit(0);
        };
    }//GEN-LAST:event_actSairActionPerformed

    private void pnlSplitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnlSplitMouseClicked
        if(evt.getClickCount() == 2){
            pnlSul.setVisible(! pnlSul.isVisible());
            
            lblSplit.setIcon(pnlSul.isVisible() ? (new javax.swing.ImageIcon(getClass().getResource("/images/down.png"))) : 
                                                  (new javax.swing.ImageIcon(getClass().getResource("/images/up.png"))));
        }
    }//GEN-LAST:event_pnlSplitMouseClicked

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if (JOptionPane.showConfirmDialog(this, "Deseja realmente se desconectar da e-ScienceNet?", ".: e-ScienceNet :.", JOptionPane.YES_NO_OPTION, 
                                      JOptionPane.QUESTION_MESSAGE, (new javax.swing.ImageIcon(getClass().getResource("/images/question.png")))) == 0){
            //informo aos demais nos que este aqui abandonou a rede
            controlaMensagens.saidaPeer();
            //finalizo o sistema
            System.exit(0);
        };
    }//GEN-LAST:event_formWindowClosing

    private void tableArquivosMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableArquivosMouseReleased
        //verifico se é o nó local
        boolean local = tablePeers.getSelectedRow() == 0 ? true : false;
               
        //verifico se é um requisição de botão direito e se não é o nó local
        if (evt.isPopupTrigger() && !local) {
                //exibo o popupMenu para iniciar a cópia dos arquivos
                popMenuArquivos.show(tableArquivos, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tableArquivosMouseReleased

    private void menuItemCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCopiarActionPerformed
        //seto o conteúdo para o no selecionado
        ContentAdvertisement adv = peerSelecionado.getAnuncioConteudo(tableArquivos.getSelectedRow());
        //mando aviso ao conteúdo remoto
        conteudoRemoto.mostrarConteudo(adv);
    }//GEN-LAST:event_menuItemCopiarActionPerformed

    private void jTextFieldEnviaMensagemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldEnviaMensagemActionPerformed
        //envio uma mensagen aos demais nós através do controlados de mensagens
        controlaMensagens.enviarMensagem(jTextFieldEnviaMensagem.getText());
        //liimpo o campo de envio de mensagens
        jTextFieldEnviaMensagem.setText("");
    }//GEN-LAST:event_jTextFieldEnviaMensagemActionPerformed

    private void btnLimparInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparInfoActionPerformed
          
        if (JOptionPane.showConfirmDialog(this, "Deseja realmente limpar as informações?", ".: e-ScienceNet :.", JOptionPane.YES_NO_OPTION, 
                                      JOptionPane.QUESTION_MESSAGE, (new javax.swing.ImageIcon(getClass().getResource("/images/question.png")))) == 0){
            jTextAreaInfo.setText("");
        };
        
    }//GEN-LAST:event_btnLimparInfoActionPerformed

    private void actSobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actSobreActionPerformed
        
    }//GEN-LAST:event_actSobreActionPerformed

    private void actSobreMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_actSobreMouseClicked
        FrmSobre frmSobre = new FrmSobre(this, true);
        frmSobre.setVisible(true);
    }//GEN-LAST:event_actSobreMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        CMS cms = gerenciaProcura.getCMS(netPeerGroup);
        try {
            gerenciaProcura.addFile(new File(edtPesquisa.getText()));

            //gerenciaProcura.addContent(files);
        } catch (Exception ex) {
            Logger.getLogger(VirtualDir.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        //peerGroupManager.createPeerGroup("eScienceNet", true, "280988");
        groupsInLocalCache();
        try {
            //peerGroupManager.joinGroup(netPeerGroup, adv, true);
            //peerGroupManager.leaveGroup(netPeerGroup.getPeerGroupAdvertisement());
        } catch (Exception ex) {
            Logger.getLogger(VirtualDir.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void actSelectGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actSelectGroupActionPerformed
        //verifico os grupos
        SemanticManager.getInstance().getInterestManager().exibirGrupos();
        
        if (JOptionPane.showConfirmDialog(this, "Para que seja realizada a troca do grupo a e-ScienceNet precisará ser fechada.\n\n"
                                              + "Deseja sair da e-ScienceNet agora?", ".: e-ScienceNet :.", JOptionPane.YES_NO_OPTION, 
                                      JOptionPane.QUESTION_MESSAGE, (new javax.swing.ImageIcon(getClass().getResource("/images/question.png")))) == 0){
            //informo aos demais nos que este aqui abandonou a rede
            controlaMensagens.saidaPeer();
            //finalizo o sistema
            System.exit(0);
        };
    }//GEN-LAST:event_actSelectGroupActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu actArquivo;
    private javax.swing.JMenuItem actConfig;
    private javax.swing.JMenu actGrupos;
    private javax.swing.JMenuItem actSair;
    private javax.swing.JMenuItem actSelectGroup;
    private javax.swing.JMenu actSobre;
    private javax.swing.JButton btnLimparInfo;
    private javax.swing.JButton btnPesquisa;
    private javax.swing.JTextField edtPesquisa;
    private javax.swing.ButtonGroup gpbBusca;
    private javax.swing.ButtonGroup gpbEscopo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelEnviaMensagem;
    private javax.swing.JLabel jLabelFileShared;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneInfo;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextArea jTextAreaInfo;
    private javax.swing.JTextField jTextFieldEnviaMensagem;
    private javax.swing.JLabel lblSplit;
    private javax.swing.JLabel lblUsuario;
    private javax.swing.JLabel lbleScienceNet;
    private javax.swing.JMenuItem menuItemCopiar;
    private javax.swing.JMenuBar mnuEScienceNet;
    private javax.swing.JPanel pnlAllComponent;
    private javax.swing.JPanel pnlArquivos;
    private javax.swing.JPanel pnlBusca;
    private javax.swing.JPanel pnlEnviaMsg;
    private javax.swing.JPanel pnlEscopo;
    private javax.swing.JPanel pnlInformacao;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlMainInfo;
    private javax.swing.JPanel pnlP2P;
    private javax.swing.JPanel pnlPesquisa;
    private javax.swing.JPanel pnlPonto;
    private javax.swing.JPanel pnlSplit;
    private javax.swing.JPanel pnlSul;
    private javax.swing.JPopupMenu popMenuArquivos;
    private javax.swing.JRadioButton rdbNosRede;
    private javax.swing.JRadioButton rdbPeerLocal;
    private javax.swing.JRadioButton rdbRecursos;
    private javax.swing.JRadioButton rdbServicos;
    private javax.swing.JRadioButton rdbTodos;
    private javax.swing.JRadioButton rdbTodosPeers;
    private javax.swing.JSplitPane sptPanelMain;
    private javax.swing.JPanel statusBar;
    private javax.swing.JTable tableArquivos;
    private javax.swing.JTable tablePeers;
    // End of variables declaration//GEN-END:variables

    private GerenciaProcura gerenciaProcura;
    private PeerGroupManager peerGroupManager;
    private RendezVousService rendezVousService;
    private PeerGroup netPeerGroup = null;
    private ControlaMensagens controlaMensagens;
    private NumberFormat FORMATADOR = DecimalFormat.getInstance();
    private File pastaPublicaPeer;
    private Peer peerSelecionado;
    private Peers peers = new Peers();
    private ModelPeer modelPeers = new ModelPeer();
    private ModelArquivos modelArquivos = new ModelArquivos();
    private ConteudoRemoto conteudoRemoto;
    private FrmDownload frmDownload = null;
     Configurator configurator = null;

    @Override
    public void notificarCancelamento(String msg) {
        jTextAreaInfo.append("O Download do arquivo " + msg + " foi cancelado." + "\n");
        jScrollPaneInfo.getVerticalScrollBar().setValue(jScrollPaneInfo.getVerticalScrollBar().getMaximum());
    }
    
    // Tabela de usuarios
    private class ModelPeer extends AbstractTableModel {
        @Override
        public int getColumnCount() {
            return 1;
        }
        @Override
        public int getRowCount() {
            return peers.getQtdPeers() + 1;
        }
        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
            if (rowIndex == 0) {
                return peerGroupManager.getMyPeerName() + " (Local)";
            }

            Peer user = peers.getPeer(rowIndex - 1);
            return user.getNome();
        }
        @Override
        public String getColumnName(int column) {
                return "Nome";
        }
    }
    
    //Tabela de Arquivos
    private class ModelArquivos extends AbstractTableModel {
        
        @Override
        public int getColumnCount() {
            return 2;
        }
        
        @Override
        public int getRowCount() {
            if (tablePeers.getSelectedRow() == 0) {
                    return pastaPublicaPeer.list().length;
            }
            if (peerSelecionado != null) {
                    return peerSelecionado.getQtdAnuncioConteudo();
            }
         
            return 0;
        }
        
        @Override
        public Object getValueAt(int rowIndex, int columnIndex) {
                        
            int indexUser = tablePeers.getSelectedRow();
            //Arquivo Local
            if (indexUser == 0) {
                if (columnIndex == 0) {
                    File s = pastaPublicaPeer.listFiles()[rowIndex];
            
                    if (s.isDirectory()) {
                        return " Pasta não pode ser compartilhada - " + s.getName();
                    } else {
                        return s.getName();
                    }
                }
                
                return FORMATADOR.format(pastaPublicaPeer.listFiles()[rowIndex].length() / 1024.0) + " KB";
            }
            
            //Arquivo Remoto
            ContentAdvertisement adv = peerSelecionado.getAnuncioConteudo(rowIndex);
            
            if (columnIndex == 0) {
                return adv.getName();
            }
            
            return FORMATADOR.format(adv.getLength() / 1024.0) + " KB";
        }
        
        @Override
        public String getColumnName(int column) {
            if (column == 0) {
                return "Nome do Arquivo";
            }
            else {
                return "Tamanho (KB)";
            }
        }
    }
    
    private void inicializacaoAuxiliar() {
        
        // Ferifica compartilhamento
        String root = conteudoRemoto.lerDiretorioPreferencia();
        root += File.separator + "pastaPublica";
        pastaPublicaPeer = new File(root);
        
        //verifico se a pasta pública para o compartilhamento de arquivos já existe
        if (!pastaPublicaPeer.exists()) {
            //crio a pasta publica para o compartilhamento de arquivos
            jTextAreaInfo.append("Compartilhamento: " + pastaPublicaPeer.getAbsolutePath() + "\n");
            pastaPublicaPeer.mkdirs();
        }
        
        //seto o diretório compartilhado
        jLabelFileShared.setText("Pasta compartilhada: [" + pastaPublicaPeer.getAbsolutePath() + "]");
        
        //seto o título da aplicação junto com o nome do peer
        setTitle(".: e-ScienceNet - <"+ peerGroupManager.getMyPeerName() +"> :.");
        lblUsuario.setText(peerGroupManager.getMyPeerName() + " | ");        
        
        //Arquivo a ser colocado as copias
        File f = new File(conteudoRemoto.lerDiretorioPreferencia() + File.separator + "copiados");
        
        //verifico se a pasta de arquivos a ser copiados já existe
        if (!f.exists()) {
                //crio a pasta de arquivos copiados
                jTextAreaInfo.append("Pasta de arquivos copiados: " + f.getAbsolutePath() + "\n");
                f.mkdirs();
        }
        
        //crio a tela de progresso de download        
        frmDownload = new FrmDownload(this, false, gerenciaProcura);                
        
        //Inicializa Formatadores
        FORMATADOR.setMaximumFractionDigits(2);
        
        //gravo as infomações de Peers nas ontologias
        SemanticManager.getInstance().gravarPeerOnOntology(configurator);
    }
    
    private void atualizarPastaPublica() {
        
        //crio um enumerado a partir do gerente de pesquisa
        Enumeration en = gerenciaProcura.recuperaConteudoLocal();

        //crio um hash local
        final HashMap hashLocal = new HashMap();
        
        //verifico a existencia dos arquivos na pasta publica
        while (en.hasMoreElements()) {
                //abro o arquivo e o coloco na tabela hash
                FileContent file = (FileContent) en.nextElement();
                //hashLocal.put(file.getFile().getName(), file);
        }

        //preencho os arquivos da pastas publicas
        File[] files = pastaPublicaPeer.listFiles(new FilenameFilter() {
            //verifica se pode adivionar o arquivo a partir da lista do hash local
            @Override
            public boolean accept(File dir, String name) {
                if (hashLocal.get(name) == null) {
                    return true;
                }
                return false;
            }
        });

        //Publica arquivos            
        if (files.length != 0) {
            //adiciono os aquivos no gerente de pesquisa
            //TODO Verificar se é prociso melhorar o anúncio de arquivos para os demais nós da rede
            //gerenciaProcura.addContent(files);
/*            
            for (int i = 0; i < files.length; i++){
            
            CMS cms = new CMS();
            try {
                cms.init(netPeerGroup, null, null);
                cms.startApp(new File("AnuncioArquivos\\jxta-NetGroup", CMS.DEFAULT_DIR));
                try {
                    cms.getContentManager().share(files[i], peerGroupManager.getMyPeerName());
                    
                    //gerenciaProcura.addContent(files);
                } catch (IOException ex) {
                    Logger.getLogger(VirtualDir.class.getName()).log(Level.SEVERE, null, ex);
                }
            } catch (PeerGroupException ex) {
                Logger.getLogger(VirtualDir.class.getName()).log(Level.SEVERE, null, ex);
            }
            }*/
        }

    }
    
    public String getApplicationPath() {  
        //crio o objeto de arquivos
        File dir = new File(".");
        //TODO tentar trocar a classe PreferenceReader pela a do pacote instantp2p baixado em Downloads
        //crio a instâncio do objeto de preferência de arquivos
        PreferenceReader prefs = PreferenceReader.getInstance();
        //abro as propriedades do arquivo        
        String cwd = prefs.getProperty(getClass().getName() + ConteudoRemoto.DIRETORIO_PREFERENCIA, null);
        //verifico se o arquivo com o diretório foi encontrado
        if (cwd == null) {
            try {
                //pego o diretório do sistemas
                cwd = dir.getCanonicalPath() + System.getProperty("file.separator");
            } catch (IOException e) {
                cwd = "";
            }
        }
        
        //retorno o diretório do sistema
        return cwd;
    } 
   
    private void iniciarSemantica(){
        try{
            //crio o gerente de semântica
            SemanticManager.getInstance().criarRepositorio(getApplicationPath());
            
            //TODO: Verificar se o peer já está associado a algum grupo
            
            //verifico os grupos
            SemanticManager.getInstance().getInterestManager().exibirGrupos();
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }
    
    public void iniciaPalaformaJXTA() {
        try {
            //crio a variável de ambiente do JXTA
            System.setProperty("JXTA_HOME", Config.JXTA_HOME);

            //crio o objeto de configuração do JXTA
            this.configurator = new Configurator();

            //verifico se já foi configurado para não ter a necessidade de abrir a tela de configuração
            if (configurator.getName() == null){
                //crio o formulário de configuração de pontos da e-ScienceNet
                FrmConfigPeer configuracaoDialog = new FrmConfigPeer(configurator);
                configuracaoDialog.setVisible(true);
            }
                        
            //TODO: Colocar a inicialização de semântica dentro do if de configuração
            //inicio a semantica do peer
            iniciarSemantica();
            
            //crio o grupo para a comunicação do peer no JXTA
            netPeerGroup = PeerGroupFactory.newNetPeerGroup();
            
            //TODO: VERIFICAR GRUPO
            PeerGroupAdvertisement adv = groupsInLocalCache();            
            PeerGroup p = netPeerGroup.newGroup(adv);
            
            //crio o serviço de rendezVous e passo este formulário para trabalhar como ouvinte da rede
            rendezVousService = p.getRendezVousService();
            rendezVousService.addListener(this);
            
            //crio o gerenciados de grupos passado o grupo deste ponto
            peerGroupManager = new PeerGroupManager(p, netPeerGroup);
            
            //Registra ouvinte para descobertas
            gerenciaProcura = new GerenciaProcura(peerGroupManager, this);
            
            //Registra conteúdos remotos            
            conteudoRemoto = new ConteudoRemoto(this, gerenciaProcura);

            //crio o objeto responsável pela conversação
            Chat chat = new Chat(peerGroupManager, this);
            chat.addListener(this);

            controlaMensagens = new ControlaMensagens(p, peerGroupManager.getMyPeerName());
            controlaMensagens.setListener(this);
            
            //TODO: Grupo novo            
            //rendezVousService = p.getRendezVousService();            
            //peerGroupManager.joinGroup(p, adv, true);       
            //controlaMensagens.setGrupo(p);
            //gerenciaProcura.grupoAlterado(p);
            
            //faço a inicialização dos demais componentes da e-ScienceNet
            inicializacaoAuxiliar();
            
            //Inicia Thread
            Thread thread = new Thread(this);
            thread.start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @Override
    public void rendezvousEvent(RendezvousEvent event) {
            jTextAreaInfo.append("Nó de encontro (RendezVous): " + event.getPeer() + "\n");
            jScrollPaneInfo.getVerticalScrollBar().setValue(jScrollPaneInfo.getVerticalScrollBar().getMaximum());
    }
    
    @Override
    public void run() {
       while (true) {
            try {
                atualizarPastaPublica();
                gerenciaProcura.iniciaProcura("*");
                controlaMensagens.procuraPeers();
                Thread.sleep(10000);
            } catch (Exception iox) {
                    jTextAreaInfo.append("ERRO de execução: " + iox.getMessage() + " \n ");
                    jScrollPaneInfo.getVerticalScrollBar().setValue(jScrollPaneInfo.getVerticalScrollBar().getMaximum());
            }
        }
    }

    @Override
    public void eventoMensagem(String user, String msg) {
        //exibo as mensagens que foram trocadas entres os nós        
        jTextAreaInfo.append(user.toUpperCase() + " (Mensagem): " + msg + "\n");
        jScrollPaneInfo.getVerticalScrollBar().setValue(jScrollPaneInfo.getVerticalScrollBar().getMaximum());
    }

    @Override
    public void eventoEntradaPeer(String name) {
        
        //verifico se o nome do evento de entrada de peer é igual ao do meu no, se for eu saio do método
        if (name.equals(peerGroupManager.getMyPeerName())) {
            return;
        }
        
        //atualizo os nos do sistema
        if (peers.atualizaPeer(name)) {
            //seto a informação na area de informação
            jTextAreaInfo.append("Novo nó encontrado: [" + name + "]\n");
            jScrollPaneInfo.getVerticalScrollBar().setValue(jScrollPaneInfo.getVerticalScrollBar().getMaximum());
            //coloco o peer na tabela de peers
            modelPeers.fireTableDataChanged();
        }
    }

    @Override
    public void eventoSaidaPeer(String name) {
        //removo o nó
        peers.removePeer(name);
        //altero o conteúdo da lista de nó
        modelPeers.fireTableDataChanged();
        //exibo a mensagem de que o nó está desconectado
        jTextAreaInfo.append("O nó [" + name + "] foi desconectado da e-ScienceNet\n");
        jScrollPaneInfo.getVerticalScrollBar().setValue(jScrollPaneInfo.getVerticalScrollBar().getMaximum());
    }

    @Override
    public void valueChanged(ListSelectionEvent e) {
        
        //pego o indice do peer selecionado
        int indexSelected = tablePeers.getSelectedRow();
        modelArquivos.fireTableDataChanged();
        
        //verifico se e o no local ou se nenhum ponto foi selecionado, retornando que nenhum ponto foi selecionado
        if (indexSelected == 0 || indexSelected == -1) {
            peerSelecionado = null;
            return;
        }
        
        //retorno o no selecionado
        peerSelecionado = peers.getPeer(indexSelected - 1);
    }

    @Override
    public void eventoDescoberta(EventoDescoberta event) {
        //crio a lista de anuncios recuperados no sistema
        List lista = event.recuperaAnuncios();
        //crio um objeto
        Object ob;
        
        //percorro a lista de anuncios encontrados
        for (int i = 0; i < lista.size(); i++) {
            //pego o anuncio do indice i
            ob = lista.get(i);
            
            //verifico se é uma instância de anuncio de conteudo
            if (ob instanceof ContentAdvertisement) {
                //pego o anuncio de conteúdo
                ContentAdvertisement adv = (ContentAdvertisement) lista.get(i);
                
                //verifico se é para criar um novo arquivo de anuncio de conteúdo
                boolean newFile = peers.atualizaAnuncioConteudo(adv.getDescription(), adv);
                //verifico se é para criar o arquivo
                if (newFile) {
                    //exibo a mensagem de que foram encontrados arquivos em um nó
                    jTextAreaInfo.append("Novo arquivo encontrado no nó [" + adv.getDescription() + "]: " + adv.getName() + "\n");
                    jScrollPaneInfo.getVerticalScrollBar().setValue(jScrollPaneInfo.getVerticalScrollBar().getMaximum());
                }
            }
        }
    }

    @Override
    public void notificarDownloadAtualiza(int percentage, String descricao) {

        //coloco a porcentagem de download
        frmDownload.setValue(percentage, descricao);
        
        //verifico se a tela de download não está sendo exibida
        if (!frmDownload.isShowing()) {
            //exibo a tela de download
            frmDownload.setVisible(true);
        }
    }

    @Override
    public void notificarDownloadFalha() {
        //exibo a notificação de que ocorreram falhas ao realizar a transferencia de arquivos
        jTextAreaInfo.append("ERRO em download do arquivo" + "\n");
        jScrollPaneInfo.getVerticalScrollBar().setValue(jScrollPaneInfo.getVerticalScrollBar().getMaximum());
    }

    @Override
    public void notificarDownloadCompleto(String url) {
        //exibo a conclusão do download do arquivo
        jTextAreaInfo.append("Tranferência de Arquivos Concluída. <" + url + ">\n");
        jScrollPaneInfo.getVerticalScrollBar().setValue(jScrollPaneInfo.getVerticalScrollBar().getMaximum());
        
        //fecho a janela de download
        frmDownload.setVisible(false);
    }

    @Override
    public void info(String str) {
        //exibo as mensagens que foram trocadas entres os nós
        jTextAreaInfo.append(str + "\n");
        jScrollPaneInfo.getVerticalScrollBar().setValue(jScrollPaneInfo.getVerticalScrollBar().getMaximum());
    }

    @Override
    public void exibirMensagem(String str) {
        //exibo as mensagens que foram trocadas entres os nós
        jTextAreaInfo.append(str + "\n");
        jScrollPaneInfo.getVerticalScrollBar().setValue(jScrollPaneInfo.getVerticalScrollBar().getMaximum());
    }

    @Override
    public void exibirMensagem(String str, String user) {
        //exibo as mensagens que foram trocadas entres os nós
        jTextAreaInfo.append(str + " ->" + user + "\n");
        jScrollPaneInfo.getVerticalScrollBar().setValue(jScrollPaneInfo.getVerticalScrollBar().getMaximum());
    }
    
    private PeerGroupAdvertisement groupsInLocalCache() {
        jTextAreaInfo.append("--- local cache (Peer Groups) ---\n");
        PeerGroupAdvertisement adv = null;
        try {
            
            Enumeration en = netPeerGroup.getDiscoveryService().getLocalAdvertisements(netPeerGroup.getDiscoveryService().GROUP, null, null);
            
            if (en != null) {
                while (en.hasMoreElements()) {                    
                    adv = (PeerGroupAdvertisement) en.nextElement();
                    jTextAreaInfo.append(adv.getName() + ", group ID = " + adv.getPeerGroupID().toString()+"\n");
                 }
            }
        } catch (Exception e) {}
        jTextAreaInfo.append("--- end local cache ---\n");        
        return adv;
    }
}
