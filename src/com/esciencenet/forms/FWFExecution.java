/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package com.esciencenet.forms;

import com.esciencenet.compositionmanager.CompositionExecute;
import com.esciencenet.compositionmanager.CompositionModel;
import com.esciencenet.compositionmanager.CompositionTaskModel;
import com.esciencenet.semanticmanager.SemanticManager;
import com.esciencenet.servicemanager.OWLSOperation;
import com.esciencenet.servicemanager.OWLSParam;
import com.esciencenet.utils.EScienceNetUtils;
import java.awt.Color;
import java.awt.Component;
import java.awt.event.MouseEvent;
import java.util.Date;
import java.util.List;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import static javax.swing.SwingConstants.CENTER;
import javax.swing.Timer;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Tadeu
 */
public class FWFExecution extends javax.swing.JDialog {

    private CompositionModel compositionModel;
    private Timer tempo = null;    
    private long tempoInicio;
    private CompositionExecute compositionExecute;
    
    /**
     * Creates new form FWFExecution
     */
    public FWFExecution(java.awt.Frame parent, boolean modal, CompositionModel compositionModel) {
        super(parent, modal);
        initComponents();
        this.compositionModel = compositionModel;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFooter = new javax.swing.JPanel();
        btnFechar = new javax.swing.JButton();
        lblTask = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        mnuControl = new javax.swing.JToolBar();
        btnPlay = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btnStop = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        lblTime = new javax.swing.JLabel();
        pgcIndo = new javax.swing.JTabbedPane();
        tblTask = new javax.swing.JPanel();
        scrollTaskInfo = new javax.swing.JScrollPane();
        edtTaskInfo = new javax.swing.JTextArea();
        tblParam = new javax.swing.JPanel();
        scrollParamInfo = new javax.swing.JScrollPane();
        edtParamInfo = new javax.swing.JTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblParameters = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblTasks = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Service Execution");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        pnlFooter.setBackground(new java.awt.Color(192, 192, 192));

        btnFechar.setBackground(new java.awt.Color(192, 192, 192));
        btnFechar.setText("Close");
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });

        lblTask.setForeground(new java.awt.Color(255, 255, 255));
        lblTask.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                lblTaskPropertyChange(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(192, 192, 192));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save-as-icon.png"))); // NOI18N
        jButton1.setText("Save Results");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFooterLayout = new javax.swing.GroupLayout(pnlFooter);
        pnlFooter.setLayout(pnlFooterLayout);
        pnlFooterLayout.setHorizontalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFooterLayout.createSequentialGroup()
                .addGap(297, 297, 297)
                .addComponent(lblTask, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlFooterLayout.setVerticalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFooterLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnFechar)
                    .addComponent(lblTask)
                    .addComponent(jButton1))
                .addContainerGap())
        );

        mnuControl.setFloatable(false);
        mnuControl.setRollover(true);

        btnPlay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/control-play-blue-icon32.png"))); // NOI18N
        btnPlay.setText("Start");
        btnPlay.setFocusable(false);
        btnPlay.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnPlay.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });
        mnuControl.add(btnPlay);
        mnuControl.add(jSeparator2);

        btnStop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/control-stop-blue-icon32.png"))); // NOI18N
        btnStop.setText("Stop");
        btnStop.setEnabled(false);
        btnStop.setFocusable(false);
        btnStop.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btnStop.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        btnStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStopActionPerformed(evt);
            }
        });
        mnuControl.add(btnStop);
        mnuControl.add(jSeparator1);

        lblTime.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/time-icon.png"))); // NOI18N
        lblTime.setText("Time Elapsed [00:00:00]");
        lblTime.setEnabled(false);
        mnuControl.add(lblTime);

        pgcIndo.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        edtTaskInfo.setEditable(false);
        edtTaskInfo.setColumns(20);
        edtTaskInfo.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        edtTaskInfo.setRows(5);
        edtTaskInfo.setWrapStyleWord(true);
        edtTaskInfo.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                edtTaskInfoPropertyChange(evt);
            }
        });
        scrollTaskInfo.setViewportView(edtTaskInfo);

        javax.swing.GroupLayout tblTaskLayout = new javax.swing.GroupLayout(tblTask);
        tblTask.setLayout(tblTaskLayout);
        tblTaskLayout.setHorizontalGroup(
            tblTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollTaskInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE)
        );
        tblTaskLayout.setVerticalGroup(
            tblTaskLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollTaskInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
        );

        pgcIndo.addTab("Workflow Information", new javax.swing.ImageIcon(getClass().getResource("/images/Services.png")), tblTask); // NOI18N

        edtParamInfo.setEditable(false);
        edtParamInfo.setColumns(20);
        edtParamInfo.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        edtParamInfo.setRows(5);
        edtParamInfo.setWrapStyleWord(true);
        scrollParamInfo.setViewportView(edtParamInfo);

        javax.swing.GroupLayout tblParamLayout = new javax.swing.GroupLayout(tblParam);
        tblParam.setLayout(tblParamLayout);
        tblParamLayout.setHorizontalGroup(
            tblParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollParamInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 649, Short.MAX_VALUE)
        );
        tblParamLayout.setVerticalGroup(
            tblParamLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollParamInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
        );

        pgcIndo.addTab("Parameter Information", new javax.swing.ImageIcon(getClass().getResource("/images/recycle-bag-icon.png")), tblParam); // NOI18N

        tblParameters.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Parameter"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblParameters.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblParameters.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblParametersMouseReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tblParameters);
        if (tblParameters.getColumnModel().getColumnCount() > 0) {
            tblParameters.getColumnModel().getColumn(0).setResizable(false);
            tblParameters.getColumnModel().getColumn(0).setPreferredWidth(20);
            tblParameters.getColumnModel().getColumn(1).setResizable(false);
            tblParameters.getColumnModel().getColumn(1).setPreferredWidth(150);
        }

        tblTasks.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Task", "Operation", "Connectors"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTasks.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblTasks.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblTasks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblTasksMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblTasksMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tblTasks);
        if (tblTasks.getColumnModel().getColumnCount() > 0) {
            tblTasks.getColumnModel().getColumn(0).setResizable(false);
            tblTasks.getColumnModel().getColumn(0).setPreferredWidth(20);
            tblTasks.getColumnModel().getColumn(1).setResizable(false);
            tblTasks.getColumnModel().getColumn(1).setPreferredWidth(150);
            tblTasks.getColumnModel().getColumn(2).setResizable(false);
            tblTasks.getColumnModel().getColumn(2).setPreferredWidth(200);
            tblTasks.getColumnModel().getColumn(3).setResizable(false);
            tblTasks.getColumnModel().getColumn(3).setPreferredWidth(400);
        }

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlFooter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(mnuControl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pgcIndo, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 515, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(mnuControl, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pgcIndo, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlFooter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setSize(new java.awt.Dimension(676, 636));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnFecharActionPerformed

    private void lblTaskPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_lblTaskPropertyChange

    }//GEN-LAST:event_lblTaskPropertyChange

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        this.preencherTasks();
    }//GEN-LAST:event_formComponentShown

    private void tblTasksMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTasksMouseReleased
        this.obterParametros();
    }//GEN-LAST:event_tblTasksMouseReleased

    public void obterParametros(){
        if(tblTasks.getSelectedRow() != -1){
                            
            OWLSOperation operation = (OWLSOperation) tblTasks.getModel().getValueAt(tblTasks.getSelectedRow(), 2);

            if(operation != null){
                this.preencherParametros(operation);
            }
        }
    }
    
    private void startExecution(){
        try{
            edtTaskInfo.append("[" + EScienceNetUtils.getCurrentDateTime("MM/dd/yyyy 'at' hh:mm:ss aa") + "]: The workflow ["+ 
                                     getCompositionModel().getNameComposition() +"] has been started.\n");
            
            tempoInicio = System.currentTimeMillis();
            pgcIndo.setSelectedIndex(0);
                
            this.compositionExecute = null;
            this.compositionExecute = new CompositionExecute(this);
            compositionExecute.start();
            
            //this.btnStopActionPerformed(null);
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "It wasn't possible to excetute this workflow.\n\n" + e.getMessage(), ".: e-ScienceNet :.", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
        
        if(this.compositionExecute != null){
            if(!this.compositionExecute.getErros().equals("")){
                if (JOptionPane.showConfirmDialog(null, "Because the errors is need to close the execution screen to validate the workflow again.\n\n"+
                                                     "Would you like to close this windows?", ".: e-ScienceNet :.", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) 
                        == JOptionPane.YES_OPTION){
                    this.setVisible(false);
                }
            }
        }
        
        btnFechar.setEnabled(false);
        btnPlay.setEnabled(false);
        btnStop.setEnabled(true);
        lblTime.setEnabled(true);
        
        this.startExecution();
        this.edtTaskInfo.setText("");
    }//GEN-LAST:event_btnPlayActionPerformed

    public void stateComplete(){        
        btnStop.setEnabled(false);
        btnFechar.setEnabled(true);
        pgcIndo.setSelectedIndex(0);
    }
    
    private void btnStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStopActionPerformed
        this.compositionExecute.requestStop();

        btnFechar.setEnabled(true);
        btnPlay.setEnabled(true);
        btnStop.setEnabled(false);
        lblTime.setEnabled(false);
        edtTaskInfo.setText("");
        edtParamInfo.setText("");
        
        ImageIcon taskIcon = new ImageIcon(getClass().getResource("/images/stopwatch-finish-icon.png"));   
        this.setStartStates(taskIcon);
    }//GEN-LAST:event_btnStopActionPerformed

    private void edtTaskInfoPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_edtTaskInfoPropertyChange

    }//GEN-LAST:event_edtTaskInfoPropertyChange

    private void tblParametersMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblParametersMouseReleased
        if(tblParameters.getSelectedRow() != -1){
            
            pgcIndo.setSelectedIndex(1);
            
            OWLSParam param = (OWLSParam) tblParameters.getModel().getValueAt(tblParameters.getSelectedRow(), 1);
            boolean isInput = (tblParameters.getModel().getValueAt(tblParameters.getSelectedRow(), 0).toString().contains("down"));
            
            if(param != null){
                
                String valueConnected = "";
                if(isInput){
                    for(OWLSParam paramConn : param.getParamConnected()){
                        if(!paramConn.getValueReturned().equals("")){
                            valueConnected = valueConnected + "|" + paramConn.getValueReturned();
                        }
                    }
                    
                    if(valueConnected.indexOf("|") != -1){
                        valueConnected = valueConnected.substring(1, valueConnected.length());
                    }
                }
                
                String info = (isInput ? "Input" : "Output") + " parameter:\n\n";                
                info = info + "- Parameter Name: " + param.getParentName() + "\n";
                info = info + "- Parameter Semantic Type: " + param.getParamDomainTerm()+ "\n";
                info = info + "- Parameter Syntatic Type: " + param.getParamType() + "\n";
                info = info + "- Content:\n" + compositionExecute.capsulink.format(compositionExecute.capsulink,
                                              (param.getValueReturned().equals("") ? 
                                              (param.getManualContent().equals("") ? 
                                              (valueConnected.equals("") ? "Nothing" :valueConnected) 
                                                                                     : param.getManualContent()) 
                                                                                     : param.getValueReturned())+ "\n");
                
                edtParamInfo.setText(info);
            }            
        }
    }//GEN-LAST:event_tblParametersMouseReleased

    
    
    private void tblTasksMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTasksMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_tblTasksMousePressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String file = JOptionPane.showInputDialog(null, "Enter with file name (No extension)", ".: e-ScienceNet :.", JOptionPane.WARNING_MESSAGE);
        
        if(!file.equals("")){            
            
            file = file + ".wfr";
                        
            String arquivoAGravar = EScienceNetUtils.encodeBase64(edtTaskInfo.getText() + this.generateAllInformation());            
            
            if(SemanticManager.getInstance().getDataManager().gravarLogWorkflow(arquivoAGravar, file)){
                               
                SemanticManager.getInstance().getDataManager().processarDownloadRequest(file);
                
                JOptionPane.showMessageDialog(null, "The workflow's log was save as e-ScienceNet's resource.", ".: e-ScienceNet :.", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private String generateAllInformation(){
        String info = "";
        
        for(CompositionTaskModel compositionTaskModel : this.compositionModel.getLstServices()){
            
            info = info + "***************************************************************************************************************\n";
            info = info + "TASK NAME: " + compositionTaskModel.getTask() + "\n";
            info = info + "OPERATION NAME: " + compositionTaskModel.getOperation().getOperationName() + "\n";
            info = info + "OPERATION DOMAIN TERM: " + compositionTaskModel.getOperation().getOperationDomainTerm() + "\n";
            info = info + "OPERATION SERVICE URL: " + compositionTaskModel.getOperation().getServiceURL() + "\n";
            info = info + "_______________________________________________________________________________________________________________\n";
            
            info = info + "INPUT PARAMETERS:\n\n";
            for(OWLSParam param : compositionTaskModel.getOperation().getInputs()){
                info = info + "Parameter Name: " + param.getParamName() + "\n";
                if(param.getValueReturned().equals("") && param.getManualContent().equals("")){
                    
                    for(OWLSParam paramAss : param.getParamConnected()){
                        info = info + "Parameter Valeu: " + (paramAss.getValueReturned().equals("") ? paramAss.getManualContent() : 
                                                                                                      paramAss.getValueReturned()) + "\n\n";
                    }
                    
                }else{
                    info = info + "Parameter Valeu: " + (param.getValueReturned().equals("") ? param.getManualContent() : 
                                                                                               param.getValueReturned()) + "\n\n";
                }
            }
            
            info = info + "OUTPUT PARAMETERS:\n\n";
            for(OWLSParam param : compositionTaskModel.getOperation().getOutputs()){
                info = info + "Parameter Name: " + param.getParamName() + "\n";
                info = info + "Parameter Valeu: " + (param.getValueReturned().equals("") ? param.getManualContent() : 
                                                                                           param.getValueReturned()) + "\n\n";
            }
        }
        
        if(!info.equals("")){
            info = info + "***************************************************************************************************************\n\n";
            info = "\n\nDETAILED RESULT:\n"+
                   "COMPOSITION NAME: " + this.compositionModel.getNameComposition() + "\n"+
                   "COMPOSITION DATE: " + EScienceNetUtils.getCurrentDateTime("mm/dd/yyyy") + "\n\n" + info;                        
        }
        
        return info + "\n\n" + this.connectorsInformarion();
    }
    
    public String connectorsInformarion(){
        String info = "";
        
        for(CompositionTaskModel compositionTaskModel : this.compositionModel.getLstServices()){
            
            for(OWLSParam param : compositionTaskModel.getOperation().getOutputs()){
                
                for(OWLSOperation connector : param.getConnectorAssociated()){
                    for(OWLSParam paramConnector : connector.getOutputs()){
                        info = info + "Parameter Name: " + paramConnector.getParamName() + "\n";
                        info = info + "Parameter Valeu: " + (paramConnector.getValueReturned().equals("") ? paramConnector.getManualContent() : 
                                                                                                            paramConnector.getValueReturned()) + "\n\n";
                    }
                }
            }
        }
        
        if(!info.equals("")){
            info = "***************************************************************************************************************\nCONNECTORS INFORMATION\n" +
                   "_______________________________________________________________________________________________________________\n" +  info + 
                   "\n***************************************************************************************************************";
        }
        
        return info;
     }
    
    private void setStartStates(ImageIcon taskIcon){
        DefaultTableModel model = (DefaultTableModel) tblTasks.getModel();
        for(int i = 0; i < model.getRowCount(); i++){
            model.setValueAt(taskIcon, i, 0);
        }
        
        tblTasks.setModel(model);
        lblTime.setText("Time Elapsed ["+ EScienceNetUtils.formatMilisecond("hh:mm:ss.SSS", 0) +"]");
    } 
    
    private void limparTabela(JTable tabela){
        
        DefaultTableModel defaultTableModel = (DefaultTableModel) tabela.getModel();
                
        while (defaultTableModel.getRowCount() != 0){         
            defaultTableModel.removeRow(0);            
        }        
    }
    
    private void preencherParametros(OWLSOperation operation){
        
        this.limparTabela(tblParameters);
        
        TableColumnModel ColumnModel = tblParameters.getColumnModel();    
        FWFExecution.JTableRenderer renderer = new FWFExecution.JTableRenderer(); 
        ColumnModel.getColumn(0).setCellRenderer(renderer);
        
        DefaultTableModel model = (DefaultTableModel) tblParameters.getModel();
        
        for(OWLSParam input : operation.getInputs()){
            
            if(!input.getParamConnectorAssociated().isEmpty()){

                for(int i = 0; i < input.getParamConnectorAssociated().size(); i++){
                    
                    for(OWLSParam inputConn : input.getConnectorAssociated().get(i).getInputs()){
                    
                        ImageIcon contenct = new ImageIcon(getClass().getResource("/images/arrow-down-icon.png"));
                        
                        if(inputConn.getParamName().equals(input.getParamConnectorAssociated().get(i).getParamName())){
                            Object[] linha = {contenct, input};
                            model.addRow(linha);
                        }else{
                            Object[] linha = {contenct, inputConn};
                            model.addRow(linha);
                        }
                    }
                }
                
            }else{                
                ImageIcon contenct = new ImageIcon(getClass().getResource("/images/arrow-down-icon.png"));

                Object[] linha = {contenct,
                                  input};

                model.addRow(linha);
            }
        }
        
        
        for(OWLSParam output : operation.getOutputs()){
                       
            if(!output.getParamConnectorAssociated().isEmpty()){

                for(int i = 0; i < output.getParamConnectorAssociated().size(); i++){
                                
                    for(OWLSParam outputConn : output.getConnectorAssociated().get(i).getOutputs()){

                        ImageIcon contenct = new ImageIcon(getClass().getResource("/images/arrow-up-icon.png"));

                        if(outputConn.getParamName().equals(output.getParamConnectorAssociated().get(i).getParamName())){
                            Object[] linha = {contenct, output};
                            model.addRow(linha);
                        }else{
                            Object[] linha = {contenct, outputConn};
                            model.addRow(linha);
                        }
                    }
                }
            }else{
                
                ImageIcon contenct = new ImageIcon(getClass().getResource("/images/arrow-up-icon.png"));

                Object[] linha = {contenct,
                                  output};
                
                model.addRow(linha);
            }
        }
        
        tblParameters.setModel(model);        
        tblParameters.setRowHeight(24);
    }
    
    private void preencherTasks(){
        try{
            this.limparTabela(tblTasks);
                       
            TableColumnModel ColumnModel = tblTasks.getColumnModel();             
            FWFExecution.JTableRenderer renderer = new FWFExecution.JTableRenderer();    
            ColumnModel.getColumn(0).setCellRenderer(renderer);
            
            DefaultTableModel model = (DefaultTableModel) tblTasks.getModel();            
            ImageIcon taskIcon = new ImageIcon(getClass().getResource("/images/stopwatch-finish-icon.png"));
            
            for(CompositionTaskModel compositionTaskModel : this.getCompositionModel().getLstServices()){
                
                Object[] linha = {taskIcon,
                                  compositionTaskModel.getTask(),
                                  compositionTaskModel.getOperation(),
                                  this.retornarConectores(compositionTaskModel.getOperation())};
                
                model.addRow(linha);
            }
            
            tblTasks.setModel(model);
            
            if(tblTasks.getRowCount() > 0){
                tblTasks.setRowSelectionInterval(0, 0);
                this.tblTasksMouseReleased(null);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "It wasn't possible to load the tasks.\n\n" + e.getMessage(), ".: e-ScienceNet :.", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private String retornarConectores(OWLSOperation operation){
        
        String conectores = "";
        
        for(OWLSParam input : operation.getInputs()){
            
            if(!input.getConnectorAssociated().isEmpty()){
                for(OWLSOperation connector : input.getConnectorAssociated()){
                    conectores = conectores + connector.getOperationName() + ", "; 
                }
            }            
        }
        
        for(OWLSParam output : operation.getOutputs()){
            
            if(!output.getConnectorAssociated().isEmpty()){
                for(OWLSOperation connector : output.getConnectorAssociated()){
                    conectores = conectores + connector.getOperationName() + ", "; 
                }
            }            
        }        
            
        if(!conectores.equals("")){
            conectores = conectores.substring(0, conectores.lastIndexOf(","));
        }
        
        return conectores;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFechar;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnStop;
    private javax.swing.JTextArea edtParamInfo;
    private javax.swing.JTextArea edtTaskInfo;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JLabel lblTask;
    public javax.swing.JLabel lblTime;
    private javax.swing.JToolBar mnuControl;
    private javax.swing.JTabbedPane pgcIndo;
    private javax.swing.JPanel pnlFooter;
    private javax.swing.JScrollPane scrollParamInfo;
    private javax.swing.JScrollPane scrollTaskInfo;
    private javax.swing.JPanel tblParam;
    private javax.swing.JTable tblParameters;
    private javax.swing.JPanel tblTask;
    public javax.swing.JTable tblTasks;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the compositionModel
     */
    public CompositionModel getCompositionModel() {
        return compositionModel;
    }

    /**
     * @return the tempo
     */
    public Timer getTempo() {
        return tempo;
    }

    /**
     * @return the tempoInicio
     */
    public long getTempoInicio() {
        return tempoInicio;
    }

    public void exibirInfo(String info){        
        edtTaskInfo.append("[" + EScienceNetUtils.getCurrentDateTime("MM/dd/yyyy 'at' hh:mm:ss aa") + "]: " + info + "\n");
        scrollTaskInfo.getVerticalScrollBar().setValue(scrollTaskInfo.getVerticalScrollBar().getMaximum());
    }
    
    public class JTableRenderer extends DefaultTableCellRenderer  {    
    
        @Override
        protected void setValue(Object value){    

            if (value instanceof ImageIcon){    

                if (value != null){    
                    ImageIcon d = (ImageIcon) value;    
                    setIcon(d);
                } else{    
                    setText("");    
                    setIcon(null);  
                    this.setFont(this.getFont().deriveFont(16));
                }    

            } else {    
                super.setValue(value);    
                setIcon(null);
                this.setFont(this.getFont().deriveFont(16));                
            }    

            this.setHorizontalAlignment(CENTER);
        }
    }
}
