/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.esciencenet.forms;

import com.esciencenet.compositionmanager.CompositionModel;
import com.esciencenet.compositionmanager.CompositionTaskModel;
import com.esciencenet.compositionmanager.ProcessWSDLInformation;
import com.esciencenet.models.DomainFileModel;
import com.esciencenet.models.WorkflowABSModel;
import com.esciencenet.searchmanager.SearchManager;
import com.esciencenet.searchmanager.SearchManagerEnum;
import com.esciencenet.semanticmanager.SemanticManager;
import com.esciencenet.servicemanager.OWLSOperation;
import com.esciencenet.servicemanager.OWLSParam;
import com.esciencenet.utils.EScienceNetUtils;
import com.esciencenet.utils.JTreeResearch;
import com.thoughtworks.xstream.XStream;
import com.thoughtworks.xstream.io.xml.DomDriver;
import java.awt.Component;
import java.awt.event.KeyEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import static javax.swing.SwingConstants.CENTER;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Tadeu
 */
public class FServicesResearch extends javax.swing.JDialog {

    private List<DomainFileModel> lstDomainFileModel;
    
    private WorkflowABSModel workflowABSModel;
    private String awfName = "";
        
    /**
     * Creates new form FServicesResearch
     */
    public FServicesResearch(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.awfName = "";
        lstDomainFileModel = SemanticManager.getInstance().obterDomainFiles(
                             SemanticManager.getInstance().getInterestManager().getGrupoSelecionado().getGroupName());
        SemanticManager.getInstance().getSearchManager().limparListaServicos();
        this.lblTaskCode.setVisible(false);
        this.lblTask.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form
     * Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        pnlHeader = new javax.swing.JPanel();
        rdbAWF = new javax.swing.JRadioButton();
        rdbFreeService = new javax.swing.JRadioButton();
        edtSearchTerm = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        cmbProperties = new javax.swing.JComboBox();
        pnlFooter = new javax.swing.JPanel();
        btnFechar = new javax.swing.JButton();
        lblTask = new javax.swing.JLabel();
        lblSelectedTask = new javax.swing.JLabel();
        btnPlugParams = new javax.swing.JButton();
        lblTaskCode = new javax.swing.JLabel();
        deskPanel = new javax.swing.JDesktopPane();
        lblTerms = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        edtTermsFinded = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        btnIncludeServices = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblSelectedServices = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        btnExcluir = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        treeServices = new javax.swing.JTree();
        btnBuscarConectores = new javax.swing.JButton();
        ckbInputConn = new javax.swing.JCheckBox();
        ckbOnlyService = new javax.swing.JCheckBox();
        treeServices1 = new javax.swing.JTree();
        jScrollPane5 = new javax.swing.JScrollPane();
        treeConnectors = new javax.swing.JTree();
        jLabel4 = new javax.swing.JLabel();
        btnUpConnector = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        tblParameters = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tblSelectedConnector = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        btnExcluir1 = new javax.swing.JButton();
        btnAssJoin = new javax.swing.JButton();
        cbkRepeatParameters = new javax.swing.JCheckBox();
        btnExecuteSingle = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        edtServiceInfo = new javax.swing.JTextPane();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Services Research");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        pnlHeader.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        buttonGroup1.add(rdbAWF);
        rdbAWF.setText("By Abstract Workflow");
        rdbAWF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbAWFActionPerformed(evt);
            }
        });

        buttonGroup1.add(rdbFreeService);
        rdbFreeService.setText("By Free Services");
        rdbFreeService.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbFreeServiceActionPerformed(evt);
            }
        });

        edtSearchTerm.setEnabled(false);

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/lupa.png"))); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlHeaderLayout = new javax.swing.GroupLayout(pnlHeader);
        pnlHeader.setLayout(pnlHeaderLayout);
        pnlHeaderLayout.setHorizontalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlHeaderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rdbAWF)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rdbFreeService)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(edtSearchTerm, javax.swing.GroupLayout.DEFAULT_SIZE, 562, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbProperties, javax.swing.GroupLayout.PREFERRED_SIZE, 385, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch)
                .addContainerGap())
        );
        pnlHeaderLayout.setVerticalGroup(
            pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlHeaderLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlHeaderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rdbAWF)
                        .addComponent(rdbFreeService)
                        .addComponent(edtSearchTerm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbProperties, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnSearch))
                .addContainerGap())
        );

        pnlFooter.setBackground(new java.awt.Color(192, 192, 192));

        btnFechar.setBackground(new java.awt.Color(192, 192, 192));
        btnFechar.setText("Close");
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });

        lblTask.setForeground(new java.awt.Color(255, 255, 255));
        lblTask.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                lblTaskPropertyChange(evt);
            }
        });

        lblSelectedTask.setForeground(new java.awt.Color(255, 255, 255));
        lblSelectedTask.setText("Selected Task:");
        lblSelectedTask.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                lblSelectedTaskPropertyChange(evt);
            }
        });

        btnPlugParams.setBackground(new java.awt.Color(192, 192, 192));
        btnPlugParams.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/chart-line-icon 16.png"))); // NOI18N
        btnPlugParams.setText("Connect parameters");
        btnPlugParams.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlugParamsActionPerformed(evt);
            }
        });

        lblTaskCode.setForeground(new java.awt.Color(255, 255, 255));
        lblTaskCode.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                lblTaskCodePropertyChange(evt);
            }
        });

        javax.swing.GroupLayout pnlFooterLayout = new javax.swing.GroupLayout(pnlFooter);
        pnlFooter.setLayout(pnlFooterLayout);
        pnlFooterLayout.setHorizontalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFooterLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSelectedTask)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTask, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTaskCode, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(393, 393, 393)
                .addComponent(btnPlugParams)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        pnlFooterLayout.setVerticalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFooterLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTaskCode, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnFechar)
                        .addComponent(lblSelectedTask)
                        .addComponent(btnPlugParams)
                        .addComponent(lblTask, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        deskPanel.setBackground(new java.awt.Color(240, 240, 240));

        lblTerms.setText("Related terms");
        deskPanel.add(lblTerms);
        lblTerms.setBounds(10, 0, 80, 16);

        edtTermsFinded.setColumns(20);
        edtTermsFinded.setFont(new java.awt.Font("Tahoma", 0, 13)); // NOI18N
        edtTermsFinded.setLineWrap(true);
        edtTermsFinded.setRows(5);
        edtTermsFinded.setWrapStyleWord(true);
        jScrollPane1.setViewportView(edtTermsFinded);

        deskPanel.add(jScrollPane1);
        jScrollPane1.setBounds(10, 20, 1300, 50);

        jLabel2.setText("Services Finded");
        deskPanel.add(jLabel2);
        jLabel2.setBounds(10, 90, 100, 16);

        btnIncludeServices.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add-icon.png"))); // NOI18N
        btnIncludeServices.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIncludeServicesActionPerformed(evt);
            }
        });
        deskPanel.add(btnIncludeServices);
        btnIncludeServices.setBounds(240, 80, 30, 25);

        tblSelectedServices.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Task", "Operation", "Domain Associeted", "Petri Op", "Prev Operation", "Service URL", "Task Code"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSelectedServices.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblSelectedServices.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblSelectedServices.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblSelectedServicesMouseReleased(evt);
            }
        });
        tblSelectedServices.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tblSelectedServicesKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(tblSelectedServices);
        if (tblSelectedServices.getColumnModel().getColumnCount() > 0) {
            tblSelectedServices.getColumnModel().getColumn(0).setResizable(false);
            tblSelectedServices.getColumnModel().getColumn(0).setPreferredWidth(20);
            tblSelectedServices.getColumnModel().getColumn(1).setResizable(false);
            tblSelectedServices.getColumnModel().getColumn(1).setPreferredWidth(140);
            tblSelectedServices.getColumnModel().getColumn(2).setPreferredWidth(140);
            tblSelectedServices.getColumnModel().getColumn(3).setResizable(false);
            tblSelectedServices.getColumnModel().getColumn(3).setPreferredWidth(190);
            tblSelectedServices.getColumnModel().getColumn(4).setResizable(false);
            tblSelectedServices.getColumnModel().getColumn(4).setPreferredWidth(70);
            tblSelectedServices.getColumnModel().getColumn(5).setPreferredWidth(100);
            tblSelectedServices.getColumnModel().getColumn(6).setResizable(false);
            tblSelectedServices.getColumnModel().getColumn(6).setPreferredWidth(500);
            tblSelectedServices.getColumnModel().getColumn(7).setResizable(false);
        }

        deskPanel.add(jScrollPane3);
        jScrollPane3.setBounds(280, 110, 570, 210);

        jLabel3.setText("Parameters");
        deskPanel.add(jLabel3);
        jLabel3.setBounds(860, 90, 110, 16);

        btnExcluir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Actions-remove-icon.png"))); // NOI18N
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });
        deskPanel.add(btnExcluir);
        btnExcluir.setBounds(820, 80, 30, 25);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Nenhum");
        treeServices.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        treeServices.setRootVisible(false);
        treeServices.setShowsRootHandles(true);
        treeServices.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                treeServicesMouseReleased(evt);
            }
        });
        treeServices.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeServicesValueChanged(evt);
            }
        });
        treeServices.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                treeServicesPropertyChange(evt);
            }
        });
        jScrollPane4.setViewportView(treeServices);

        deskPanel.add(jScrollPane4);
        jScrollPane4.setBounds(10, 110, 260, 360);

        btnBuscarConectores.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/port-icon16.png"))); // NOI18N
        btnBuscarConectores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarConectoresActionPerformed(evt);
            }
        });
        deskPanel.add(btnBuscarConectores);
        btnBuscarConectores.setBounds(760, 80, 30, 25);

        ckbInputConn.setText("Input Connector");
        deskPanel.add(ckbInputConn);
        ckbInputConn.setBounds(640, 80, 120, 25);

        ckbOnlyService.setText("Only connector for this service");
        deskPanel.add(ckbOnlyService);
        ckbOnlyService.setBounds(430, 80, 210, 25);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Nenhum");
        treeServices1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        treeServices1.setRootVisible(false);
        treeServices1.setShowsRootHandles(true);
        treeServices1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                treeServices1MouseReleased(evt);
            }
        });
        treeServices1.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeServices1ValueChanged(evt);
            }
        });
        treeServices1.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                treeServices1PropertyChange(evt);
            }
        });
        deskPanel.add(treeServices1);
        treeServices1.setBounds(0, 0, 1010, 0);

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Nenhum");
        treeConnectors.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        treeConnectors.setRootVisible(false);
        treeConnectors.setShowsRootHandles(true);
        treeConnectors.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                treeConnectorsMouseReleased(evt);
            }
        });
        treeConnectors.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeConnectorsValueChanged(evt);
            }
        });
        treeConnectors.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                treeConnectorsPropertyChange(evt);
            }
        });
        jScrollPane5.setViewportView(treeConnectors);

        deskPanel.add(jScrollPane5);
        jScrollPane5.setBounds(280, 350, 460, 120);

        jLabel4.setText("Connectors Associated");
        deskPanel.add(jLabel4);
        jLabel4.setBounds(780, 330, 150, 16);

        btnUpConnector.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/application-get-icon.png"))); // NOI18N
        btnUpConnector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpConnectorActionPerformed(evt);
            }
        });
        deskPanel.add(btnUpConnector);
        btnUpConnector.setBounds(740, 350, 30, 25);

        tblParameters.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Parameter", "", "Semantic Type", "Syntatic Type"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblParameters.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblParameters.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblParameters.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblParametersMouseReleased(evt);
            }
        });
        jScrollPane6.setViewportView(tblParameters);
        if (tblParameters.getColumnModel().getColumnCount() > 0) {
            tblParameters.getColumnModel().getColumn(0).setResizable(false);
            tblParameters.getColumnModel().getColumn(0).setPreferredWidth(130);
            tblParameters.getColumnModel().getColumn(1).setResizable(false);
            tblParameters.getColumnModel().getColumn(1).setPreferredWidth(20);
            tblParameters.getColumnModel().getColumn(2).setPreferredWidth(200);
            tblParameters.getColumnModel().getColumn(3).setResizable(false);
            tblParameters.getColumnModel().getColumn(3).setPreferredWidth(200);
        }

        deskPanel.add(jScrollPane6);
        jScrollPane6.setBounds(860, 110, 450, 210);

        jLabel5.setText("Selected Services");
        deskPanel.add(jLabel5);
        jLabel5.setBounds(280, 90, 110, 16);

        tblSelectedConnector.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Task", "Operation", "Association", "Service URL"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblSelectedConnector.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblSelectedConnector.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblSelectedConnector.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tblSelectedConnectorMouseReleased(evt);
            }
        });
        jScrollPane7.setViewportView(tblSelectedConnector);
        if (tblSelectedConnector.getColumnModel().getColumnCount() > 0) {
            tblSelectedConnector.getColumnModel().getColumn(0).setResizable(false);
            tblSelectedConnector.getColumnModel().getColumn(0).setPreferredWidth(20);
            tblSelectedConnector.getColumnModel().getColumn(1).setResizable(false);
            tblSelectedConnector.getColumnModel().getColumn(1).setPreferredWidth(140);
            tblSelectedConnector.getColumnModel().getColumn(2).setResizable(false);
            tblSelectedConnector.getColumnModel().getColumn(2).setPreferredWidth(140);
            tblSelectedConnector.getColumnModel().getColumn(3).setPreferredWidth(100);
            tblSelectedConnector.getColumnModel().getColumn(4).setResizable(false);
            tblSelectedConnector.getColumnModel().getColumn(4).setPreferredWidth(500);
        }

        deskPanel.add(jScrollPane7);
        jScrollPane7.setBounds(780, 350, 500, 120);

        jLabel6.setText("Connectors Results");
        deskPanel.add(jLabel6);
        jLabel6.setBounds(280, 330, 120, 16);

        btnExcluir1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Actions-remove-icon.png"))); // NOI18N
        btnExcluir1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluir1ActionPerformed(evt);
            }
        });
        deskPanel.add(btnExcluir1);
        btnExcluir1.setBounds(1280, 350, 30, 25);

        btnAssJoin.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/arrow-join-icon.png"))); // NOI18N
        btnAssJoin.setToolTipText("Join Operations");
        btnAssJoin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssJoinActionPerformed(evt);
            }
        });
        deskPanel.add(btnAssJoin);
        btnAssJoin.setBounds(790, 80, 30, 25);

        cbkRepeatParameters.setSelected(true);
        cbkRepeatParameters.setText("Repeat output on reseach connectors");
        deskPanel.add(cbkRepeatParameters);
        cbkRepeatParameters.setBounds(1070, 80, 241, 25);

        btnExecuteSingle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/world-go-icon16.png"))); // NOI18N
        btnExecuteSingle.setToolTipText("");
        btnExecuteSingle.setEnabled(false);
        btnExecuteSingle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecuteSingleActionPerformed(evt);
            }
        });
        deskPanel.add(btnExecuteSingle);
        btnExecuteSingle.setBounds(209, 80, 30, 25);

        edtServiceInfo.setEditable(false);
        edtServiceInfo.setContentType("text/html"); // NOI18N
        edtServiceInfo.setText("");
        edtServiceInfo.setToolTipText("");
        jScrollPane2.setViewportView(edtServiceInfo);

        jLabel1.setText("Service Informations");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pnlFooter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(deskPanel)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pnlHeader, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deskPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 470, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlFooter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setSize(new java.awt.Dimension(1329, 807));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnFecharActionPerformed

    private DomainFileModel getOWLDomainByName(String domainName){
        
        for (DomainFileModel domainFileModel : lstDomainFileModel){
            
            if (domainFileModel.getDomainName().equals(domainName)){
                return domainFileModel;
            }
        }
        
        return null;
    }
    
    private void rdbAWFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbAWFActionPerformed

        edtSearchTerm.setEnabled(false);
        cmbProperties.setEnabled(true);
        
        if(workflowABSModel == null){
            FAbstractWFSelect frmAbstractWFSelect = new FAbstractWFSelect(null, true);
            frmAbstractWFSelect.setVisible(true);
            File file = frmAbstractWFSelect.getAwfSelected();

            if(file != null){

                XStream xstream = new XStream(new DomDriver());
                this.workflowABSModel = (WorkflowABSModel) xstream.fromXML(file);  

                if(this.workflowABSModel != null){
                    
                    if(!this.checkOntologyDisponibility(this.workflowABSModel.getDomainOntolgyName())){
                        
                        String message = (this.workflowABSModel.getDomainOntolgyName() == null) ? "Don't exists domain ontology associated with this Abstract Workflow." : 
                                          "To use this Abstract Workflow,you need to make the download of the domain ontology [" + 
                                          this.workflowABSModel.getDomainOntolgyName() + "] in some Super Node related with your semantic group.";
                        
                        JOptionPane.showMessageDialog(null, message, ".: e-ScienceNet :.", JOptionPane.WARNING_MESSAGE);
                        this.workflowABSModel = null;
                        return;
                    }
                    
                    this.awfName = file.getAbsoluteFile().getName();
                    FShowAbstractWorkflow frmShowAWF = new FShowAbstractWorkflow(this.awfName, true, true, false, true);
                    deskPanel.add(frmShowAWF);  
                    frmShowAWF.setWorkflowABSModel(workflowABSModel);
                    frmShowAWF.setLblSelectedTask(lblTask);
                    frmShowAWF.setLblTaskCode(lblTaskCode);
                    frmShowAWF.setVisible(true);
                }
            }
        }else{
            
            if(!this.checkOntologyDisponibility(this.workflowABSModel.getDomainOntolgyName())){
                        
                String message = (this.workflowABSModel.getDomainOntolgyName() == null) ? "Don't exists domain ontology associated with this Abstract Workflow." : 
                                  "To use this Abstract Workflow, you need to make the download of the domain ontology [" + 
                                  this.workflowABSModel.getDomainOntolgyName() + "] in some Super Node related with your semantic group.";

                JOptionPane.showMessageDialog(null, message, ".: e-ScienceNet :.", JOptionPane.WARNING_MESSAGE);
                this.workflowABSModel = null;
                return;
            }
            
            boolean existsAWF = false;            
            for(Component component : deskPanel.getComponents()){                
                if(component instanceof FShowAbstractWorkflow){
                    existsAWF = true;
                    break;
                }                
            }
            
            if(!existsAWF){
                FShowAbstractWorkflow frmShowAWF = new FShowAbstractWorkflow(this.awfName, true, true, true, false);
                deskPanel.add(frmShowAWF);  
                frmShowAWF.setWorkflowABSModel(workflowABSModel);
                frmShowAWF.setLblSelectedTask(lblTask);
                frmShowAWF.setLblTaskCode(lblTaskCode);
                frmShowAWF.setVisible(true);
            }
        }
    }//GEN-LAST:event_rdbAWFActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        //limpo a tree de busca
        treeServices.setModel(null);
        treeServices.setCellRenderer(new JTreeResearch());
        SemanticManager.getInstance().getSearchManager().setTreeResults(treeServices);
        SemanticManager.getInstance().getSearchManager().limparListaServicos();
    }//GEN-LAST:event_formComponentShown

    private void rdbFreeServiceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbFreeServiceActionPerformed
        edtSearchTerm.setEnabled(true);
        cmbProperties.removeAllItems();
        workflowABSModel = null;
        lblTaskCode.setText("");
        
        this.preecherComboDomain(cmbProperties);
    }//GEN-LAST:event_rdbFreeServiceActionPerformed

    private boolean checkOntologyDisponibility(String domainOWLName){
        //percorro a lista de grupos encontrados
        for (DomainFileModel domainFileModel : lstDomainFileModel){
            if(domainFileModel.getDomainName().equals(domainOWLName)){
                return true;
            }
        }  
        
        return false;
    }
    
    private void preecherComboDomain(JComboBox comboBox){
        
        //crio o modelo de items da combobox
        DefaultComboBoxModel cmdModel = new DefaultComboBoxModel();        
        
        //percorro a lista de grupos encontrados
        for (DomainFileModel domainFileModel : lstDomainFileModel){
            //seto o elemento no modelo
            cmdModel.addElement(domainFileModel.getDomainName());
        }       
        
        //seto o modelo e o indice do item na combobox
        comboBox.setModel(cmdModel);               
        comboBox.setSelectedIndex(0);             
    }
    
    private void lblTaskPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_lblTaskPropertyChange
        if(!lblTask.getText().equals("")){
            edtSearchTerm.setText(lblTask.getText());
            lblSelectedTask.setText("Selected Task: " + lblTask.getText());
                 
            DomainFileModel domainFileModel = getOWLDomainByName(this.workflowABSModel.getDomainOntolgyName());            
            if(domainFileModel != null){
                cmbProperties.removeAllItems();
                List<String> lstPropriedades = SemanticManager.getInstance().getObjectPropertyByClass(lblTask.getText(), 
                                               domainFileModel.getDomainOWLFile());
                for(String property : lstPropriedades){
                    cmbProperties.addItem(property);
                }
            }
        }
    }//GEN-LAST:event_lblTaskPropertyChange

    private void lblSelectedTaskPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_lblSelectedTaskPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_lblSelectedTaskPropertyChange

    private WorkflowABSModel checkFatherTask(String taskChild){
        
        WorkflowABSModel awfChild = WorkflowABSModel.getObjectByTaskName(workflowABSModel, taskChild);
        
        if(awfChild != null){
            WorkflowABSModel awfFather = WorkflowABSModel.getObjectFather(workflowABSModel, awfChild);
            
            if(awfFather != null){
                if(!awfFather.getTaskCode().equals("TS")){
                    return awfFather;
                }                
            }else{
                return null;
            }
        }
        
        return null;
    }
    
    private boolean checkSelectedNextService(){
        
        WorkflowABSModel taskFatherCode = this.checkFatherTask(edtSearchTerm.getText());
        
        if(taskFatherCode == null){
            return true;
        }else{
            if (tblSelectedServices.getSelectedRow() == -1){
                JOptionPane.showMessageDialog(null, "Any service was selected in the Selected Service table, or the task that you want to research, needs as "+
                                                     "previous taks ["+ taskFatherCode.getTaskName() +"].", ".: e-ScienceNet :.", JOptionPane.ERROR_MESSAGE);
                return false;
            }
            
            WorkflowABSModel taksSelected = null;
            if(tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 7).toString().equals("")){
                taksSelected = WorkflowABSModel.getObjectByTaskName(workflowABSModel, 
                             tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 1).toString());
            }else{
                taksSelected = WorkflowABSModel.getObjectByCode(workflowABSModel, 
                             tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 7).toString());
            }
            
            String children = "";
            for(WorkflowABSModel child : taksSelected.getTaskChild()){
                children = children + " - " + child.getTaskName();
            }
            
            if(!children.equals("")){
                children = children.replaceFirst("-", "").trim();
            }
            
            if(!children.contains(edtSearchTerm.getText())){
                JOptionPane.showMessageDialog(null, "Wasn't possible to research the service ["+ edtSearchTerm.getText() +"].\n"+
                                                    "The selected taks is " + taksSelected.getTaskName() + ", as next task do you need to research: ["+ children +"].", 
                                                    ".: e-ScienceNet :.", JOptionPane.ERROR_MESSAGE);
                return false;
            }
        }
        
        return true;
    }
    
    private boolean checkSearch(){
        
        if(!checkSelectedNextService()){
            return false;
        }
        
        return true;
    }
    
    private boolean verificaPesquisaPetri(){
            
        if(tblSelectedServices.getSelectedRow() != -1){
            
            String namePrev = tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 2).toString();
            String petri = tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 4).toString();
            
            //verifica sequence
            if(petri.equals("SEQUENCE")){
                
                int cont = 0;
                for(int i = 0; i < tblSelectedServices.getRowCount(); i++){
                
                    if(tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 5).toString().equals(namePrev)){
                        cont++;
                    }                    
                }              
                
                if(cont > 1){
                    JOptionPane.showMessageDialog(null, "The operation " + namePrev + " is a SEQUENCE. So, must exists just ONE operation after her.", ".: e-ScienceNet :.",
                                                  JOptionPane.WARNING_MESSAGE);
                    return false;
                }
            }            
        }
        
        return true;
    }
    
    private boolean checkTaskCodeInTable(){
        
        if(!lblTaskCode.getText().equals("")){
            for(int i = 0; i < tblSelectedServices.getRowCount(); i++){
                if(tblSelectedServices.getModel().getValueAt(i, 7).toString().equals(lblTaskCode.getText())){
                    return true;
                }
            }
        }
        
        return false;
    }
    
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        if(edtSearchTerm.getText().equals("")){
            JOptionPane.showMessageDialog(null, "There are no terms for services search.", ".: e-ScienceNet :.", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        if((tblSelectedServices.getModel().getRowCount() != 0) && (tblSelectedServices.getSelectedRow() == -1)){
            if(!tblSelectedServices.getModel().getValueAt(tblSelectedServices.getModel().getRowCount() - 1, 4).toString().contains("JOIN")){
                JOptionPane.showMessageDialog(null, "Is need to select a previus service in table Selected Services.", ".: e-ScienceNet :.", JOptionPane.WARNING_MESSAGE);
                return;
            }            
        }
                
        if(this.checkTaskCodeInTable()){
            JOptionPane.showMessageDialog(null, "Already exists in the table the task which you want to search.", ".: e-ScienceNet :.", JOptionPane.WARNING_MESSAGE);
            return; 
        }
        
        if(tblSelectedServices.getSelectedRow() != -1){
            try{                
                if(!tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 4).toString().contains("SPLIT")){
                    if(!tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 4).toString().contains("JOIN")){
                        tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow() + 1, 4);
                        JOptionPane.showMessageDialog(null, "Already exists a next service in the selected services table. So, some new service can't be inserted before that.",
                                                      ".: e-ScienceNet :.", JOptionPane.WARNING_MESSAGE);    
                        return;
                    }
                }                
               
            }catch(Exception e){}
        }
        
        if(!this.verificaPesquisaPetri()){
            return;
        }
        
        //limpo a tree de busca
        treeServices.setModel(null);
        treeServices.setCellRenderer(new JTreeResearch());
        SemanticManager.getInstance().getSearchManager().setTreeResults(treeServices);
        
        List<String> lstSearchTerms = null;
        
        String xmlServicoSelecionado = "";        
        if(rdbAWF.isSelected()){        
            
            if(! checkSearch()){
                return;
            }
            
            DomainFileModel domainFileModel = getOWLDomainByName(this.workflowABSModel.getDomainOntolgyName());            
            if(domainFileModel != null){
                
                lstSearchTerms = SemanticManager.getInstance().searchTermsRelated(domainFileModel.getDomainOWLFile(), 
                                                                                  cmbProperties.getSelectedItem().toString(), 
                                                                                  edtSearchTerm.getText());
            }
        }else{
            DomainFileModel domainFileModel = getOWLDomainByName(cmbProperties.getSelectedItem().toString());            
            if(domainFileModel != null){
                lstSearchTerms = new ArrayList<>();
                
                List<DomainFileModel> lstDomainFileModels = SemanticManager.getInstance().searchServiceDomain(domainFileModel, edtSearchTerm.getText());
                
                if(lstDomainFileModels.isEmpty()){
                    JOptionPane.showMessageDialog(null, "Any terms were finded for the research.", ".: e-ScienceNet :.", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                
                for(DomainFileModel domainFile : lstDomainFileModels){
                  
                    List<String> lstRelated = SemanticManager.getInstance().getAllSubAndEquivalentClasses(domainFileModel.getDomainOWLFile(), domainFile.getDomainName());
                    
                    for(String term : lstRelated){
                        
                        if(lstSearchTerms.indexOf(term) == -1){
                            lstSearchTerms.add(term);
                        }
                    }                    
                }
            }
        }  
        
        if(tblSelectedServices.getSelectedRow() != -1){

            String name = tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 2).toString();
            String petriOp = tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 4).toString();
            
            OWLSOperation owlsOperation = SemanticManager.getInstance().getSearchManager().buscaInfoService(name);
            owlsOperation = SemanticManager.getInstance().getCompositionManager().moutnOWLSOperationToSearch(owlsOperation, petriOp, false);
            
            if(owlsOperation != null){
                XStream xml = new XStream(new DomDriver());
                xmlServicoSelecionado = xml.toXML(owlsOperation.getOutputs());
            }                    
        }
        
        String searchTerms = EScienceNetUtils.retornarStringBuscaFiles(SearchManagerEnum.SERVICE_SEARCH.toString(), lstSearchTerms);
        
        edtTermsFinded.setText(searchTerms.replace(SearchManagerEnum.SERVICE_SEARCH.toString() + "#", "").replaceAll("#", " - "));
        
        if(!xmlServicoSelecionado.equals("")){
            searchTerms = searchTerms + "||" + xmlServicoSelecionado;
        }
        
        SemanticManager.getInstance().getSearchManager().enviarRequisicaoRemota(searchTerms);
        //tres minutos de espera
        SemanticManager.getInstance().getSearchManager().initializeWait(360);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void treeServicesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeServicesMouseReleased
       
    }//GEN-LAST:event_treeServicesMouseReleased

    private void treeServicesValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeServicesValueChanged
        if(treeServices.getSelectionPath() != null){
            edtServiceInfo.setContentType("text/html");
            boolean hasChildren = (treeServices.getModel().getChildCount(treeServices.getSelectionPath().getLastPathComponent()) > 0);
            edtServiceInfo.setText(SemanticManager.getInstance().getSearchManager().obterInformacoesService(treeServices.getSelectionPath().getLastPathComponent().toString(),
                                   hasChildren, lblTaskCode.getText()));
            edtServiceInfo.setCaretPosition(0);
            btnExecuteSingle.setEnabled(true);
        }
    }//GEN-LAST:event_treeServicesValueChanged

    private void treeServicesPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_treeServicesPropertyChange

    }//GEN-LAST:event_treeServicesPropertyChange

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        SemanticManager.getInstance().getSearchManager().setTreeResults(null);
    }//GEN-LAST:event_formWindowClosing

    private void btnIncludeServicesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIncludeServicesActionPerformed
        
        TableColumnModel ColumnModel = tblSelectedServices.getColumnModel();    
        FServicesResearch.JTableRenderer renderer = new FServicesResearch.JTableRenderer();    
        ColumnModel.getColumn(0).setCellRenderer(renderer);
        
        DefaultTableModel model = (DefaultTableModel) tblSelectedServices.getModel();
        
        if(! treeServices.getSelectionModel().isSelectionEmpty()){
            
            String pertri = "";
            if(workflowABSModel != null){
                WorkflowABSModel wam = WorkflowABSModel.getObjectByTaskName(workflowABSModel, edtSearchTerm.getText());
                
                String taskCode = "";
                if(wam != null){
                    pertri = wam.getTaskPetriOp();
                    taskCode = wam.getTaskCode();
                }else{
                    pertri = WorkflowABSModel.getObjectByTaskName(workflowABSModel, edtSearchTerm.getText()).getTaskPetriOp();
                }
                
                if(pertri.equals("") && taskCode.equals("")){
                    FPetriOP frmPetri = new FPetriOP(null, true);
                    frmPetri.setVisible(true);
                    pertri = frmPetri.getPetriOP();
                    
                    if(pertri.equals("")){
                        JOptionPane.showMessageDialog(null, "Is necessary to choose one Petri operation.", ".: e-ScienceNet :.", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                }
            }else{
                FPetriOP frmPetri = new FPetriOP(null, true);
                frmPetri.setVisible(true);
                pertri = frmPetri.getPetriOP();

                if(pertri != null){
                    if(pertri.equals("")){
                        JOptionPane.showMessageDialog(null, "Is necessary to choose one Petri operation.", ".: e-ScienceNet :.", JOptionPane.WARNING_MESSAGE);
                        return;
                    }
                }else{
                    return;
                }
            }
            
            OWLSOperation owlsOPeration = 
                     SemanticManager.getInstance().getSearchManager().buscaInfoService(treeServices.getSelectionPath().getLastPathComponent().toString());
            
            ImageIcon contenct = new ImageIcon(getClass().getResource("/images/world-icon16.png"));
            
            if(owlsOPeration != null){
                
                String name = "";
                if(tblSelectedServices.getSelectedRow() != -1){
                    name = tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 2).toString();
                    
                    String petriOp = tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 4).toString();
                    if(petriOp.contains("JOIN")){
                        FSelectJoinTask frmFSelectJoinTask = new FSelectJoinTask(null, true, tblSelectedServices, name);
                        frmFSelectJoinTask.setVisible(true);
                        
                        if(!frmFSelectJoinTask.getSelectPrevious().equals("")){
                            name = name + "," + frmFSelectJoinTask.getSelectPrevious();
                        }else{
                            return;
                        }
                    }
                }
                
                Object[] linha = {contenct,
                                  edtSearchTerm.getText(), 
                                  owlsOPeration.getOperationName(),
                                  owlsOPeration.getOperationDomainTerm(),                                  
                                  pertri,
                                  name,
                                  owlsOPeration.getServiceURL(),
                                  lblTaskCode.getText()};   

                model.addRow(linha);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Choose a service to move to selected table.", ".: e-ScienceNet :.", JOptionPane.WARNING_MESSAGE);
        }
        
        tblSelectedServices.setModel(model);
        treeServices.setModel(null);
        btnExecuteSingle.setEnabled(false);
    }//GEN-LAST:event_btnIncludeServicesActionPerformed
    
    private void tblSelectedServicesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSelectedServicesMouseReleased
        if(tblSelectedServices.getSelectedRow() != -1){
            
            edtServiceInfo.setContentType("text/html");
            
            String name = tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 2).toString();
            String taskCode = tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 7).toString();
            
            if(tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 3).toString().equals("")){
                edtServiceInfo.setText(SemanticManager.getInstance().getSearchManager().obterInformacoesConnectores(name, false));
            }else{
                edtServiceInfo.setText(SemanticManager.getInstance().getSearchManager().obterInformacoesService(name, false, taskCode));
                
                OWLSOperation operation = SemanticManager.getInstance().getSearchManager().buscaInfoService(name);
                
                if(operation != null){
                    this.limparTabela(tblParameters);
                    this.limparTabela(tblSelectedConnector);
                    treeConnectors.setModel(null);
                    
                    this.preencherParametros(operation);
                }
            }
            edtServiceInfo.setCaretPosition(0);   
        }
    }//GEN-LAST:event_tblSelectedServicesMouseReleased

    private void preencherConnectores(OWLSOperation operation){
        
        TableColumnModel ColumnModel = tblSelectedConnector.getColumnModel();    
        FServicesResearch.JTableRenderer renderer = new FServicesResearch.JTableRenderer();    
        ColumnModel.getColumn(0).setCellRenderer(renderer);
        
        DefaultTableModel model = (DefaultTableModel) tblSelectedConnector.getModel();

        ImageIcon contenct = new ImageIcon(getClass().getResource("/images/port-icon16.png"));
        
        for(OWLSParam input : operation.getInputs()){
            
            if(input.getConnectorAssociated().size() > 0){
                
                for(int i = 0; i < input.getConnectorAssociated().size(); i++){
                    
                    OWLSOperation connector = input.getConnectorAssociated().get(i);
                    
                    Object[] linha = {contenct,
                                  operation.getOperationName() + " connector ",
                                  connector.getOperationName(),
                                  input.getParamName() + " == " + input.getParamConnectorAssociated().get(i).getParamName(),
                                  connector.getServiceURL()};
                
                    model.addRow(linha); 
                    
                    this.preencherConnectores(connector);
                }              
            }            
        }
        
        for(OWLSParam output : operation.getOutputs()){
            
            if(output.getConnectorAssociated().size() > 0){
                
                for(int i = 0; i < output.getConnectorAssociated().size(); i++){
                    
                    OWLSOperation connector = output.getConnectorAssociated().get(i);
                    
                    Object[] linha = {contenct,
                                  operation.getOperationName() + " connector ",
                                  connector.getOperationName(),
                                  output.getParamName() + " == " + output.getParamConnectorAssociated().get(i).getParamName(),
                                  connector.getServiceURL()};
                
                    model.addRow(linha); 
                    
                    this.preencherConnectores(connector);
                }              
            }            
        }        
            
        tblSelectedConnector.setModel(model);
    }
    
    private void preencherParametros(OWLSOperation operation){
        this.limparTabela(tblParameters);
        
        TableColumnModel ColumnModel = tblParameters.getColumnModel();    
        FServicesResearch.JTableRenderer renderer = new FServicesResearch.JTableRenderer(); 
        ColumnModel.getColumn(1).setCellRenderer(renderer);
        
        DefaultTableModel model = (DefaultTableModel) tblParameters.getModel();
        
        for(OWLSParam input : operation.getInputs()){
            
            String semantic = input.getParamDomainTerm();
            if(semantic.contains("#")){
                semantic = semantic.substring(semantic.lastIndexOf("#") + 1, semantic.length()).trim();
            }
            
            String syntatic = input.getParamType();
            if(syntatic.contains("#")){
                syntatic = syntatic.substring(syntatic.lastIndexOf("#") + 1, syntatic.length()).trim();
            }            
            
            if(input.getConnectorAssociated().size() > 0){
                    
                for(int i = 0; i < input.getConnectorAssociated().size(); i++){
                    for(OWLSParam inputConn : input.getConnectorAssociated().get(i).getInputs()){

                        semantic = inputConn.getParamDomainTerm();
                        if(semantic.contains("#")){
                            semantic = semantic.substring(semantic.lastIndexOf("#") + 1, semantic.length()).trim();
                        }

                        syntatic = inputConn.getParamType();
                        if(syntatic.contains("#")){
                            syntatic = syntatic.substring(syntatic.lastIndexOf("#") + 1, syntatic.length()).trim();
                        }

                        ImageIcon contenct = new ImageIcon(getClass().getResource("/images/arrow-down-icon.png"));

                        String paramName = inputConn.getParamName();
                        if(inputConn.getParamName().equals(input.getParamConnectorAssociated().get(i).getParamName())){
                            paramName = input.getParamName();
                        }

                        Object[] linha = {paramName,
                                          contenct,
                                          semantic,
                                          syntatic};

                        model.addRow(linha);                    
                    }
                }                    
            }else{                
                ImageIcon contenct = new ImageIcon(getClass().getResource("/images/arrow-down-icon.png"));

                Object[] linha = {input.getParamName(),
                                  contenct,
                                  semantic,
                                  syntatic};

                model.addRow(linha);
            }            
        }
        
        
        for(OWLSParam output : operation.getOutputs()){
            
            String semantic = output.getParamDomainTerm();
            if(semantic.contains("#")){
                semantic = semantic.substring(semantic.lastIndexOf("#") + 1, semantic.length()).trim();
            }
            
            String syntatic = output.getParamType();
            if(syntatic.contains("#")){
                syntatic = syntatic.substring(syntatic.lastIndexOf("#") + 1, syntatic.length()).trim();
            }
            
            if(output.getConnectorAssociated().size() > 0){

                for(int i = 0; i < output.getConnectorAssociated().size(); i++){
                    for(OWLSParam outputConn : output.getConnectorAssociated().get(i).getOutputs()){

                        semantic = outputConn.getParamDomainTerm();

                        if(semantic.contains("#")){
                            semantic = semantic.substring(semantic.lastIndexOf("#") + 1, semantic.length()).trim();
                        }

                        syntatic = outputConn.getParamType();
                        if(syntatic.contains("#")){
                            syntatic = syntatic.substring(syntatic.lastIndexOf("#") + 1, syntatic.length()).trim();
                        }

                        ImageIcon contenct = new ImageIcon(getClass().getResource("/images/arrow-up-icon.png"));

                        String paramName = outputConn.getParamName();
                        if(outputConn.getParamName().equals(output.getParamConnectorAssociated().get(i).getParamName())){
                            paramName = output.getParamName();
                        }

                        Object[] linha = {paramName,
                                          contenct,
                                          semantic,
                                          syntatic};

                        model.addRow(linha);                    
                    }
                }
            }else{

                ImageIcon contenct = new ImageIcon(getClass().getResource("/images/arrow-up-icon.png"));

                Object[] linha = {output.getParamName(),
                                  contenct,
                                  semantic,
                                  syntatic};

                model.addRow(linha);
            }            
        }
        
        tblParameters.setModel(model);        
        tblParameters.setRowHeight(24);
        
        this.limparTabela(tblSelectedConnector);
        this.preencherConnectores(operation);
    }
        
    
    private void limparTabela(JTable tabela){
        
        DefaultTableModel defaultTableModel = (DefaultTableModel) tabela.getModel();
                
        while (defaultTableModel.getRowCount() != 0){         
            defaultTableModel.removeRow(0);            
        }        
    }
    
    private void limparParametros(OWLSOperation operacao){
        for(OWLSParam input : operacao.getInputs()){
            input.setConnectorAssociated(null);
            input.setParamConnectorAssociated(null);
        }
        
        for(OWLSParam output : operacao.getOutputs()){
            output.setConnectorAssociated(null);
            output.setParamConnectorAssociated(null);
        }
    }
    
    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed
        
        if(tblSelectedServices.getSelectedRow() != -1){
            DefaultTableModel model = (DefaultTableModel) tblSelectedServices.getModel();   
            
            String name = tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 2).toString();
            
            OWLSOperation operacao = SemanticManager.getInstance().getSearchManager().buscaInfoService(name);
            
            if(operacao != null){
                this.limparParametros(operacao);
                model.removeRow(tblSelectedServices.getSelectedRow());
                tblSelectedServices.setModel(model);  
                this.limparTabela(tblParameters);
                this.limparTabela(tblSelectedConnector);
            }
        }else{
            JOptionPane.showMessageDialog(null, "Choose a service/connector to remove.", ".: e-ScienceNet :.", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnBuscarConectoresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarConectoresActionPerformed
        if(tblSelectedServices.getSelectedRow() != -1){

            if(ckbInputConn.isSelected()){
                try{
                    tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow() - 1, 0);
                    JOptionPane.showMessageDialog(null, "Already exists a next service in the selected services table. So, some new connector can't be inserted before that.",
                                                  ".: e-ScienceNet :.", JOptionPane.WARNING_MESSAGE);
                    return;
                }catch(Exception e){}                
            }else{
                try{
                    tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow() + 1, 0);
                    JOptionPane.showMessageDialog(null, "Already exists a previous service in the selected services table. So, some new connector can't be inserted after that.",
                                                  ".: e-ScienceNet :.", JOptionPane.WARNING_MESSAGE);
                    return;
                }catch(Exception e){}   
            }
            
            treeConnectors.setModel(null);
            treeConnectors.setCellRenderer(new JTreeResearch());
            SemanticManager.getInstance().getSearchManager().setTreeResultsConnector(treeConnectors);
                        
            String name = tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 2).toString();
            String petriOp = tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 4).toString();
            
            OWLSOperation owlsOperation = SemanticManager.getInstance().getSearchManager().buscaInfoService(name);
            owlsOperation = SemanticManager.getInstance().getCompositionManager().moutnOWLSOperationToSearch(owlsOperation, petriOp, cbkRepeatParameters.isSelected());
            
            XStream xStream = new XStream(new DomDriver());
            String xmlParams = "";
            if(ckbInputConn.isSelected()){
                xmlParams = xStream.toXML(owlsOperation.getInputs());
            }else{
                xmlParams = xStream.toXML(owlsOperation.getOutputs());
            }
            
            String searchTerms = SearchManagerEnum.CONN_SEARCH.toString().concat(SemanticManager.getInstance().getNomePeer()).concat("|")
                                                                         .concat(SemanticManager.getInstance().getInterestManager().getGrupoSelecionado().getGroupName()).concat("|")
                                                                         .concat(ckbInputConn.isSelected() ? "1" : "0").concat("|")                                                                         
                                                                         .concat(ckbOnlyService.isSelected() ? ProcessWSDLInformation.clearNumberInOperation(name) : "").concat("|").concat(xmlParams);
            
            SemanticManager.getInstance().getSearchManager().getControlaMensagens().enviarMensagem(searchTerms);
            //tres minutos de espera
            SemanticManager.getInstance().getSearchManager().initializeWait(360);
        }else{
            JOptionPane.showMessageDialog(null, "Choose a previous/next service/connector to make a connectors research.", ".: e-ScienceNet :.", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnBuscarConectoresActionPerformed

    private void treeServices1MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeServices1MouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_treeServices1MouseReleased

    private void treeServices1ValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeServices1ValueChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_treeServices1ValueChanged

    private void treeServices1PropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_treeServices1PropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_treeServices1PropertyChange

    private void treeConnectorsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treeConnectorsMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_treeConnectorsMouseReleased

    private void treeConnectorsValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeConnectorsValueChanged
        if(treeConnectors.getSelectionPath() != null){
            edtServiceInfo.setContentType("text/html");
            boolean hasChildren = (treeConnectors.getModel().getChildCount(treeConnectors.getSelectionPath().getLastPathComponent()) > 0);
            edtServiceInfo.setText(SemanticManager.getInstance().getSearchManager().obterInformacoesConnectores(treeConnectors.getSelectionPath().getLastPathComponent().toString(),
                                   hasChildren));
            edtServiceInfo.setCaretPosition(0);
        }
    }//GEN-LAST:event_treeConnectorsValueChanged

    private void treeConnectorsPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_treeConnectorsPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_treeConnectorsPropertyChange

    private void btnUpConnectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpConnectorActionPerformed
               
        if(! treeConnectors.getSelectionModel().isSelectionEmpty()){
            
            OWLSOperation connector = 
                     SemanticManager.getInstance().getSearchManager().buscaInfoConnectores(treeConnectors.getSelectionPath().getLastPathComponent().toString());           
            
            if(connector != null){
                OWLSOperation service = 
                     SemanticManager.getInstance().getSearchManager().buscaInfoService(
                     tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 2).toString());
                
                if(service != null){
                    FAssociateParams frmAssociateParams = null;
                    frmAssociateParams = new FAssociateParams(null, true, connector, service, connector.getCompatibility(), ckbInputConn.isSelected());                    
                    frmAssociateParams.setVisible(true);                    
                    
                    if(!frmAssociateParams.getSelectedAssociation().equals("")){
                        this.limparTabela(tblParameters);
                        this.limparTabela(tblSelectedConnector);
                        this.preencherParametros(service);
                        treeConnectors.setModel(null);            
                    }
                }                 
            }
        }else{
            JOptionPane.showMessageDialog(null, "Choose a connector to move to selected table.", ".: e-ScienceNet :.", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnUpConnectorActionPerformed

    private void tblParametersMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblParametersMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_tblParametersMouseReleased

    private void tblSelectedConnectorMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblSelectedConnectorMouseReleased
        if(tblSelectedConnector.getSelectedRow() != -1){
            
            String connector = tblSelectedConnector.getModel().getValueAt(tblSelectedConnector.getSelectedRow(), 2).toString();
            edtServiceInfo.setContentType("text/html");            
            edtServiceInfo.setText(SemanticManager.getInstance().getSearchManager().obterInformacoesConnectores(connector, false));
            edtServiceInfo.setCaretPosition(0);
        }
    }//GEN-LAST:event_tblSelectedConnectorMouseReleased

    private void btnExcluir1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluir1ActionPerformed
        if(tblSelectedConnector.getSelectedRow() != -1){
            DefaultTableModel model = (DefaultTableModel) tblSelectedConnector.getModel();
            
            OWLSOperation operacao = SemanticManager.getInstance().getSearchManager().buscaInfoService(tblSelectedServices.getModel().getValueAt(
                                               tblSelectedServices.getSelectedRow(), 2).toString());
            
            String connector = tblSelectedConnector.getModel().getValueAt(tblSelectedConnector.getSelectedRow(), 2).toString();
            
            if(operacao != null){
                for(OWLSParam input : operacao.getInputs()){                    
                    if(input.getConnectorAssociated() != null){
                        for(int i = 0; i < input.getConnectorAssociated().size(); i++){
                            if(input.getConnectorAssociated().get(i).getOperationName().equals(connector)){                                
                                input.getParamConnectorAssociated().remove(input.getParamConnectorAssociated().get(i));
                                input.getConnectorAssociated().remove(input.getConnectorAssociated().get(i));
                                break;
                            }
                        }                        
                    }                    
                }

                for(OWLSParam output : operacao.getOutputs()){
                    if(output.getConnectorAssociated() != null){
                         for(int i = 0; i < output.getConnectorAssociated().size(); i++){
                            if(output.getConnectorAssociated().get(i).getOperationName().equals(connector)){                                
                                output.getParamConnectorAssociated().remove(output.getParamConnectorAssociated().get(i));
                                output.getConnectorAssociated().remove(output.getConnectorAssociated().get(i));
                                break;
                            }
                        }                       
                    } 
                }
                
                model.removeRow(tblSelectedConnector.getSelectedRow());
            }   
            
            this.preencherParametros(operacao);
        }
    }//GEN-LAST:event_btnExcluir1ActionPerformed

    private void btnPlugParamsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlugParamsActionPerformed
        if(tblSelectedServices.getModel().getRowCount() > 0){
            
            CompositionModel compositionModel = new CompositionModel();
            compositionModel.setNameComposition(!this.awfName.equals("") ? this.awfName :
                                     JOptionPane.showInputDialog(null, "Put the workflow's name: ", ".: e-ScienceNet :.", JOptionPane.INFORMATION_MESSAGE));
            
            if(compositionModel.getNameComposition() == null){
                return;
            }
            compositionModel.setData(new Date());
            
            for(int i = 0; i < tblSelectedServices.getModel().getRowCount(); i++){
                
                String serviceName = tblSelectedServices.getModel().getValueAt(i, 2).toString();
                
                OWLSOperation operation = SemanticManager.getInstance().getSearchManager().buscaInfoService(serviceName);
                
                if(operation != null){
                 
                    String task = tblSelectedServices.getModel().getValueAt(i, 1).toString();
                    String taskCode = tblSelectedServices.getModel().getValueAt(i, 7).toString();
                    String petri = tblSelectedServices.getModel().getValueAt(i, 4).toString();
                    String operationName = tblSelectedServices.getModel().getValueAt(i, 2).toString();
                    
                    CompositionTaskModel compositionTaskModel = new CompositionTaskModel();
                    compositionTaskModel.setOperation(operation);
                    compositionTaskModel.setTask(task);
                    compositionTaskModel.setTaskCode(taskCode);
                    compositionTaskModel.setPetriOperation(petri);
                    String nextTasks = this.getNextTasks(operationName);
                    compositionTaskModel.setNextTasks(nextTasks);
                    
                    compositionModel.getLstServices().add(compositionTaskModel);                    
                }                
            }
            
            if(!compositionModel.getLstServices().isEmpty()){
                FConnectParams frmConnectParams = new FConnectParams(null, true, compositionModel);
                frmConnectParams.setVisible(true);
            }
        }
    }//GEN-LAST:event_btnPlugParamsActionPerformed

    private void lblTaskCodePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_lblTaskCodePropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_lblTaskCodePropertyChange

    private void btnAssJoinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssJoinActionPerformed
        
        if(tblSelectedServices.getSelectedRow() != -1){
            String previous = tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 5).toString();

            String petriOp = tblSelectedServices.getModel().getValueAt(tblSelectedServices.getSelectedRow(), 4).toString();
            //if(petriOp.contains("JOIN")){
                FSelectJoinTask frmFSelectJoinTask = new FSelectJoinTask(null, true, tblSelectedServices, previous);
                frmFSelectJoinTask.setVisible(true);

                if(!frmFSelectJoinTask.getSelectPrevious().equals("")){
                    previous = previous + "," + frmFSelectJoinTask.getSelectPrevious();
                    tblSelectedServices.getModel().setValueAt(previous, tblSelectedServices.getSelectedRow(), 5);
                }
            //}
        }
    }//GEN-LAST:event_btnAssJoinActionPerformed

    private void tblSelectedServicesKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblSelectedServicesKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ESCAPE){
            if(tblSelectedServices.getSelectedRow() > -1){
                tblSelectedServices.clearSelection();
            }
        }
    }//GEN-LAST:event_tblSelectedServicesKeyPressed

    private void btnExecuteSingleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecuteSingleActionPerformed
        if(! treeServices.getSelectionModel().isSelectionEmpty()){
            OWLSOperation owlsOPeration = 
                     SemanticManager.getInstance().getSearchManager().buscaInfoService(treeServices.getSelectionPath().getLastPathComponent().toString());
            
            FExecuteSingleService frmExecuteSingleService = new FExecuteSingleService(null, true, owlsOPeration);
            frmExecuteSingleService.setVisible(true);
            
            this.clearParameters(owlsOPeration.getInputs());
            this.clearParameters(owlsOPeration.getOutputs());
        }
    }//GEN-LAST:event_btnExecuteSingleActionPerformed

    private void clearParameters(List<OWLSParam> owlsParams){
        
        for(OWLSParam param : owlsParams){
            if(!param.getValueReturned().equals("")){
                param.setValueReturned("");
            }
            
            if(!param.getManualContent().equals("")){
                param.setManualContent("");
            }
        }        
    }
    
    private String getNextTasks(String taks){
        
        String next = "";
        for(int i = 0; i < tblSelectedServices.getRowCount(); i++){
            
            String prevTasks = tblSelectedServices.getModel().getValueAt(i, 5).toString();
            
            StringTokenizer strPrevTasks = new StringTokenizer(prevTasks, ",");
            while(strPrevTasks.hasMoreTokens()){
                                
                if(strPrevTasks.nextToken().trim().equals(taks)){
                    next = next + "|" + tblSelectedServices.getModel().getValueAt(i, 2).toString();
                }   
            }
        }
            
        if(!next.trim().equals("")){
            next = next.substring(1);
        }
        
        return next;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssJoin;
    private javax.swing.JButton btnBuscarConectores;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JButton btnExcluir1;
    private javax.swing.JButton btnExecuteSingle;
    private javax.swing.JButton btnFechar;
    private javax.swing.JButton btnIncludeServices;
    private javax.swing.JButton btnPlugParams;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpConnector;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JCheckBox cbkRepeatParameters;
    private javax.swing.JCheckBox ckbInputConn;
    private javax.swing.JCheckBox ckbOnlyService;
    private javax.swing.JComboBox cmbProperties;
    private javax.swing.JDesktopPane deskPanel;
    private javax.swing.JTextField edtSearchTerm;
    private javax.swing.JTextPane edtServiceInfo;
    private javax.swing.JTextArea edtTermsFinded;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JLabel lblSelectedTask;
    private javax.swing.JLabel lblTask;
    private javax.swing.JLabel lblTaskCode;
    private javax.swing.JLabel lblTerms;
    private javax.swing.JPanel pnlFooter;
    private javax.swing.JPanel pnlHeader;
    private javax.swing.JRadioButton rdbAWF;
    private javax.swing.JRadioButton rdbFreeService;
    private javax.swing.JTable tblParameters;
    private javax.swing.JTable tblSelectedConnector;
    private javax.swing.JTable tblSelectedServices;
    private javax.swing.JTree treeConnectors;
    private javax.swing.JTree treeServices;
    private javax.swing.JTree treeServices1;
    // End of variables declaration//GEN-END:variables

    public class JTableRenderer extends DefaultTableCellRenderer  {    
    
        @Override
        protected void setValue(Object value){    

            if (value instanceof ImageIcon){    

                if (value != null){    
                    ImageIcon d = (ImageIcon) value;    
                    setIcon(d);
                } else{    
                    setText("");    
                    setIcon(null);  
                    this.setFont(this.getFont().deriveFont(16));
                }    

            } else {    
                super.setValue(value);    
            }    

            this.setHorizontalAlignment(CENTER);
        }
    }
}
