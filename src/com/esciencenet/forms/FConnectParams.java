/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.esciencenet.forms;

import com.esciencenet.compositionmanager.CompositionModel;
import com.esciencenet.compositionmanager.CompositionTaskModel;
import com.esciencenet.compositionmanager.CompositionTasksConnectionValidation;
import com.esciencenet.semanticmanager.SemanticManager;
import com.esciencenet.servicemanager.OWLSOperation;
import com.esciencenet.servicemanager.OWLSParam;
import static java.awt.image.ImageObserver.WIDTH;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import static javax.swing.SwingConstants.CENTER;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Tadeu
 */
public class FConnectParams extends javax.swing.JDialog {

    private CompositionModel compositionModel;
    
    /**
     * Creates new form FConnectParams
     */
    public FConnectParams(java.awt.Frame parent, boolean modal, CompositionModel compositionModel) {
        super(parent, modal);
        initComponents();
        this.compositionModel = compositionModel;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form
     * Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlFooter = new javax.swing.JPanel();
        btnFechar = new javax.swing.JButton();
        lblTask = new javax.swing.JLabel();
        btnExecution = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        cmbTasks = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTask = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        cmbParameters = new javax.swing.JComboBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblParameters = new javax.swing.JTable();
        btnAddParam = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnInputConnector = new javax.swing.JButton();
        btnLoop = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Connect Parameters");
        setResizable(false);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        pnlFooter.setBackground(new java.awt.Color(192, 192, 192));

        btnFechar.setBackground(new java.awt.Color(192, 192, 192));
        btnFechar.setText("Close");
        btnFechar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFecharActionPerformed(evt);
            }
        });

        lblTask.setForeground(new java.awt.Color(255, 255, 255));
        lblTask.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                lblTaskPropertyChange(evt);
            }
        });

        btnExecution.setBackground(new java.awt.Color(192, 192, 192));
        btnExecution.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/control-play-blue-icon.png"))); // NOI18N
        btnExecution.setText("Try to execute");
        btnExecution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExecutionActionPerformed(evt);
            }
        });

        btnSave.setBackground(new java.awt.Color(192, 192, 192));
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/save-as-icon.png"))); // NOI18N
        btnSave.setText("Save and Share");
        btnSave.setToolTipText("");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlFooterLayout = new javax.swing.GroupLayout(pnlFooter);
        pnlFooter.setLayout(pnlFooterLayout);
        pnlFooterLayout.setHorizontalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFooterLayout.createSequentialGroup()
                .addGap(251, 251, 251)
                .addComponent(btnSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExecution)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnFechar, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTask, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlFooterLayout.setVerticalGroup(
            pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFooterLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlFooterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnFechar)
                        .addComponent(btnExecution)
                        .addComponent(btnSave))
                    .addComponent(lblTask))
                .addContainerGap())
        );

        cmbTasks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbTasksActionPerformed(evt);
            }
        });

        jLabel1.setText("Task");

        tblTask.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Task", "Service", "Petri OP", "Next Service", ""
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblTask.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        tblTask.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tblTask.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblTaskMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblTask);
        if (tblTask.getColumnModel().getColumnCount() > 0) {
            tblTask.getColumnModel().getColumn(0).setResizable(false);
            tblTask.getColumnModel().getColumn(0).setPreferredWidth(25);
            tblTask.getColumnModel().getColumn(1).setPreferredWidth(150);
            tblTask.getColumnModel().getColumn(2).setPreferredWidth(150);
            tblTask.getColumnModel().getColumn(3).setPreferredWidth(100);
            tblTask.getColumnModel().getColumn(4).setPreferredWidth(150);
            tblTask.getColumnModel().getColumn(5).setResizable(false);
            tblTask.getColumnModel().getColumn(5).setPreferredWidth(25);
        }

        jLabel2.setText("Parameters");

        cmbParameters.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "INPUTS", "OUTPUTS" }));
        cmbParameters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbParametersActionPerformed(evt);
            }
        });

        tblParameters.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Input Params", "Value"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblParameters.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(tblParameters);
        if (tblParameters.getColumnModel().getColumnCount() > 0) {
            tblParameters.getColumnModel().getColumn(0).setResizable(false);
        }

        btnAddParam.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/add-icon.png"))); // NOI18N
        btnAddParam.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddParamActionPerformed(evt);
            }
        });

        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/limpar.png"))); // NOI18N
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnInputConnector.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/port-icon16.png"))); // NOI18N
        btnInputConnector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInputConnectorActionPerformed(evt);
            }
        });

        btnLoop.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/arrow-refresh-small-icon.png"))); // NOI18N
        btnLoop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoopActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlFooter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbParameters, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAddParam, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbTasks, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(btnLoop, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(btnInputConnector, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 602, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbTasks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(cmbParameters, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnInputConnector)
                    .addComponent(btnLoop))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnAddParam)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClear)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlFooter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        setSize(new java.awt.Dimension(635, 609));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnFecharActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFecharActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnFecharActionPerformed

    private void lblTaskPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_lblTaskPropertyChange

    }//GEN-LAST:event_lblTaskPropertyChange

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        this.setTitle(this.getTitle() + " - " + this.compositionModel.getNameComposition());
        this.preencherComboTask();
    }//GEN-LAST:event_formComponentShown

    private void cmbTasksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbTasksActionPerformed
        
        CompositionTaskModel taskModel = this.getTaskModel();
        if(taskModel != null){
            
            this.limparTabela(tblTask);
            
            TableColumnModel ColumnModel = tblTask.getColumnModel();    
            FConnectParams.JTableRenderer renderer = new FConnectParams.JTableRenderer();    
            ColumnModel.getColumn(0).setCellRenderer(renderer);
            ColumnModel.getColumn(3).setCellRenderer(renderer);
            ColumnModel.getColumn(4).setCellRenderer(renderer);
            ColumnModel.getColumn(5).setCellRenderer(renderer);
            
            DefaultTableModel model = (DefaultTableModel) tblTask.getModel();
            
            ImageIcon content = new ImageIcon(getClass().getResource("/images/world-icon16.png"));
            ImageIcon info = new ImageIcon(getClass().getResource("/images/information-icon.png"));
            
            Object[] linha = {content,
                              taskModel.getTask(),
                              taskModel.getOperation(),
                              taskModel.getPetriOperation(),
                              (!taskModel.getNextTasks().equals("")) ? taskModel.getNextTasks() : "There aren't next task",
                              (taskModel.getOperation().getServiceDescription().equals("") ? null : info)};
            
            model.addRow(linha);            
                        
            this.preencherConnectores(taskModel.getOperation(), model, taskModel);
            
            tblTask.setModel(model);
            
            this.preencherParametros();
        }        
    }//GEN-LAST:event_cmbTasksActionPerformed

    private void preencherParametros(){
        
        this.limparTabela(tblParameters);         
        
        CompositionTaskModel compositionTaskModel = this.compositionModel.getLstServices().get(cmbTasks.getSelectedIndex());
        
        List<OWLSParam> paramteres = null;
        if(cmbParameters.getSelectedIndex() == 0){            
            paramteres = compositionTaskModel.getOperation().getInputs();
        }else{
            paramteres = compositionTaskModel.getOperation().getOutputs();
        }
        
        DefaultTableModel model = (DefaultTableModel) tblParameters.getModel();        
        for(OWLSParam param : paramteres){
           
            param.setParentName(compositionTaskModel.getOperation().getOperationName() + " - " + compositionTaskModel.getTaskCode());
            
            if(!param.getConnectorAssociated().isEmpty()){
                
                List<OWLSParam> connParamteres = new ArrayList<>();
                if(cmbParameters.getSelectedIndex() == 0){
                    
                    for(int i = 0; i < param.getConnectorAssociated().size(); i++){
                        connParamteres.addAll(param.getConnectorAssociated().get(i).getInputs());
                    }
                    
                }else{
                    for(int i = 0; i < param.getConnectorAssociated().size(); i++){
                        connParamteres.addAll(param.getConnectorAssociated().get(i).getOutputs());
                    }
                }
                
                for(OWLSParam connParam : connParamteres){                    
                    
                    String paramsConnected = "";
                    for(OWLSParam paramConnected : connParam.getParamConnected()){
                        paramsConnected = paramsConnected + "|" + paramConnected.getParamName();
                    }
                    
                    if(paramsConnected.contains("|")){
                        paramsConnected = paramsConnected.substring(1, paramsConnected.length());
                    }
                    
                    Object[] linhaConn = {connParam,
                                         (connParam.getParamConnected().size() > 0) ? paramsConnected :
                                         (connParam.getManualContent().equals("") ? null : "[Manual Value] - " + connParam.getManualContent())};
            
                    model.addRow(linhaConn);
                }                
            }else{
                
                String paramsConnected = "";
                for(OWLSParam paramConnected : param.getParamConnected()){
                    paramsConnected = paramsConnected + "|" +  paramConnected.getParamName();
                }

                if(paramsConnected.contains("|")){
                    paramsConnected = paramsConnected.substring(1, paramsConnected.length());
                }
                
                Object[] linha = {param,
                             (param.getParamConnected().size() > 0) ? paramsConnected :
                             (param.getManualContent().equals("") ? null : "[Manual Value] - " + param.getManualContent())};
            
                model.addRow(linha);
            }
        }
        tblParameters.setModel(model);
    }
    
    private OWLSParam getParam(String paramName, String serviceName, boolean isInput){
        
        for(CompositionTaskModel compositionTaskModel : this.compositionModel.getLstServices()){
            
            if(compositionTaskModel.getOperation().getOperationName().equals(serviceName)){

                OWLSParam owlsParam = null;
                if(isInput){            
                    owlsParam = getParam(compositionTaskModel.getOperation().getInputs(), paramName, isInput);
                }else{
                    owlsParam = getParam(compositionTaskModel.getOperation().getOutputs(), paramName, isInput);
                }                    

                if(owlsParam != null){
                    return owlsParam;
                }      
            }
        }
        
        return null;
    }
    
    private OWLSParam getParam(List<OWLSParam> parameters, String paramName, boolean isInput){
        
        for(OWLSParam param : parameters){
            
            if(param.getParamName().equals(paramName)){
                return param;
            }        
            
            if(!param.getConnectorAssociated().isEmpty()){
                
                List<OWLSParam> connParamteres = new ArrayList<>();
                if(isInput){            
                    for(int i = 0; i < param.getConnectorAssociated().size(); i++){
                        connParamteres.addAll(param.getConnectorAssociated().get(i).getInputs());
                    }                    
                }else{
                    for(int i = 0; i < param.getConnectorAssociated().size(); i++){
                        connParamteres.addAll(param.getConnectorAssociated().get(i).getOutputs());
                    }
                }
                
                for(OWLSParam connParam : connParamteres){
                    
                    if(connParam.getParamName().equals(paramName)){
                        return connParam;
                    }    
                }                
            }
        }
        
        return null;
    }
    
    private void cmbParametersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbParametersActionPerformed
        
        DefaultTableColumnModel defaultTableColumnModel = (DefaultTableColumnModel) tblParameters.getColumnModel();
                
        defaultTableColumnModel.getColumn(0).setHeaderValue((cmbParameters.getSelectedIndex() == 0) ? "Input Parameters" : "Output Parameters");
        
        tblParameters.setColumnModel(defaultTableColumnModel);
        
        this.preencherParametros();
    }//GEN-LAST:event_cmbParametersActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        if(tblParameters.getSelectedRow() != -1){
            
            DefaultTableModel model = (DefaultTableModel) tblParameters.getModel();
            model.setValueAt(null, tblParameters.getSelectedRow(), 1);
            
            OWLSOperation operation = this.compositionModel.getLstServices().get(cmbTasks.getSelectedIndex()).getOperation();
            
            OWLSParam owlsParam = this.getParam(model.getValueAt(tblParameters.getSelectedRow(), 0).toString(), operation.getOperationName(), 
                                  (cmbParameters.getSelectedIndex() == 0));
            if(owlsParam != null){
                if(owlsParam.getParamConnected().size() > 0){
                    owlsParam.getParamConnected().clear();
                }
                owlsParam.setManualContent("");
            }            
        }
    }//GEN-LAST:event_btnClearActionPerformed

    public OWLSParam findParameter(OWLSParam parameter, String paramName){
        
        for(OWLSParam param : parameter.getParamConnected()){
            if(param.getParamName().equals(paramName)){
                return param;
            }
        }
        
        return null;
    }
    
    private void btnAddParamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddParamActionPerformed
        if(tblParameters.getSelectedRow() != -1){
            
            CompositionTaskModel compositionTaskModel = this.compositionModel.getLstServices().get(cmbTasks.getSelectedIndex());
            
            //first Case - Inputs in First Service
            if((cmbTasks.getSelectedIndex() == 0) && (cmbParameters.getSelectedIndex() == 0)){
                this.firstOrFifthCase(true);
                
            //second Case - Outputs in First Service
            }else if((cmbTasks.getSelectedIndex() == 0) && (cmbParameters.getSelectedIndex() == 1) && (!compositionTaskModel.getNextTasks().equals(""))){
                this.secondOrFourthCase();
            
            //fifth Case - Outputs in Last Service
            }else if((cmbParameters.getSelectedIndex() == 1) && (compositionTaskModel.getNextTasks().equals(""))){
                this.firstOrFifthCase(false);
                
            //third Case - Inputs any service
            }else if((cmbParameters.getSelectedIndex() == 0)){
                this.thirdCase();
                
            //fourth Case - Outputs any service    
            }else{
                this.secondOrFourthCase();
            }
        }
    }//GEN-LAST:event_btnAddParamActionPerformed

    private void btnExecutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExecutionActionPerformed
        FWaitingResponse frmWaitingResponse = SemanticManager.getInstance().getCompositionManager().getFrmWatingReponse(320, "Validating Workflow...", true);
        
        CompositionTasksConnectionValidation compositionValidation = new CompositionTasksConnectionValidation();
        compositionValidation.setFrmWaintingResponse(frmWaitingResponse);
        compositionValidation.setCompositionModel(this.compositionModel);
        
        frmWaitingResponse.setAction(compositionValidation);
        frmWaitingResponse.setVisible(true);
        
        if(!frmWaitingResponse.isCanceled()){
            FWFExecution frmWFExecution = new FWFExecution(null, true, compositionModel);
            frmWFExecution.setVisible(true);
            this.setVisible(false);
        }
    }//GEN-LAST:event_btnExecutionActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        String xmlFile = JOptionPane.showInputDialog(null, "Enter with file name (No extension)", ".: e-ScienceNet :.", JOptionPane.WARNING_MESSAGE);
        
        if(!xmlFile.equals("")){            
            
            xmlFile = xmlFile + ".wkf";
                        
            if(SemanticManager.getInstance().getDataManager().gravarFunctionalWF(compositionModel, xmlFile)){
                               
                //TODO: Voltar essa requisicao aqui.
                SemanticManager.getInstance().getDataManager().processarDownloadRequest(xmlFile);
                
                JOptionPane.showMessageDialog(null, "The functional workflows was save as e-ScienceNet resource.", ".: e-ScienceNet :.", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnInputConnectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInputConnectorActionPerformed
        if(tblTask.getSelectedRow() != -1){
            
            if(tblTask.getModel().getValueAt(tblTask.getSelectedRow(), 4).toString().toString().equals("-")){
                OWLSOperation connector = (OWLSOperation) tblTask.getModel().getValueAt(tblTask.getSelectedRow(), 2);
                
                if(connector != null){
                    FPutParameters frmPutParameters = new FPutParameters(null, true, connector.getOperationName(), connector.getInputs());
                    frmPutParameters.setVisible(true);
                    this.preencherParametros();
                }
            }
        }
    }//GEN-LAST:event_btnInputConnectorActionPerformed

    private void btnLoopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoopActionPerformed
        if(tblTask.getSelectedRow() != -1){
            
            OWLSOperation operation = (OWLSOperation) tblTask.getModel().getValueAt(tblTask.getSelectedRow(), 2);

            if(operation != null){
                FRestrictionService frmRestrictionService = new FRestrictionService(null, true, operation);                
                frmRestrictionService.setVisible(true);
            }
        }
    }//GEN-LAST:event_btnLoopActionPerformed

    private void tblTaskMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblTaskMouseClicked
        if(tblTask.getSelectedColumn() == 5){
            
            OWLSOperation operation = (OWLSOperation) tblTask.getModel().getValueAt(tblTask.getSelectedRow(), 2);

            if(operation != null){
                JOptionPane.showMessageDialog(null, operation.getServiceDescription(), ".: e-ScienceNet - Information :.", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_tblTaskMouseClicked
        
    private List<OWLSOperation> searchPreviousServicer(CompositionTaskModel actualTaskModel){
        try{
            List<OWLSOperation> lstPreviousService = new ArrayList<>();
            
            for(CompositionTaskModel compositionTaskModel : this.compositionModel.getLstServices()){
                
                StringTokenizer strTokenizer = new StringTokenizer(compositionTaskModel.getNextTasks(), "|");
                while(strTokenizer.hasMoreTokens()){
                    
                    if(strTokenizer.nextToken().trim().equals(actualTaskModel.getOperation().getOperationName())){
                        if(lstPreviousService.indexOf(compositionTaskModel.getOperation()) == -1){
                            lstPreviousService.add(compositionTaskModel.getOperation());
                        }
                    }                    
                }                        
            }
            
            return lstPreviousService;
        }catch(Exception e){
            JOptionPane.showMessageDialog(null, "It wasn't possible to find out the previous services.\n\n" + e, ".: e-ScienceNet :.", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }
    
    private String getTaskCode(String taskName){
        
        for(int i = 0; i < cmbTasks.getItemCount(); i++){
            
            CompositionTaskModel compositionTaskModel = this.compositionModel.getLstServices().get(i);
            if(compositionTaskModel.getOperation().getOperationName().contains(taskName)){  
                return compositionTaskModel.getTaskCode();
            }            
        }
        
        return "";
    }
    
    /**
     * Terceiro Case: Qualquer serviço e suas entradas
     */
    private void thirdCase(){
        DefaultTableModel model = (DefaultTableModel) tblParameters.getModel();
            
        OWLSOperation operation = this.compositionModel.getLstServices().get(cmbTasks.getSelectedIndex()).getOperation();

        OWLSParam owlsParam = (OWLSParam) model.getValueAt(tblParameters.getSelectedRow(), 0);
        owlsParam.setParentName(operation.getOperationName() + " - " + this.compositionModel.getLstServices().get(cmbTasks.getSelectedIndex()).getTaskCode());
        
        List<OWLSOperation> lstPrevOperations = this.searchPreviousServicer(this.compositionModel.getLstServices().get(cmbTasks.getSelectedIndex()));
        
        if((owlsParam != null) && (lstPrevOperations != null)){
            
            List<OWLSParam> lstNextParam = new ArrayList<>();
            for(OWLSOperation preOperation : lstPrevOperations){
                for(OWLSParam prevParam : preOperation.getOutputs()){
                        
                    if(SemanticManager.getInstance().getCompositionManager().compareSingleService(prevParam, owlsParam)){
                        if(prevParam.getParamConnected().isEmpty()){
                            String taskCode = this.getTaskCode(preOperation.getOperationName());
                            prevParam.setParentName(preOperation.getOperationName() + " - " + taskCode);
                            lstNextParam.add(prevParam);
                        }
                    }
                }
            }
            
            FPutParameters frmPutParameters = new FPutParameters(null, true, operation.getOperationName(), owlsParam, lstNextParam, true);
            frmPutParameters.setVisible(true);
            
            if(!owlsParam.getManualContent().equals("")){
                model.setValueAt("[Manual Value] - " + owlsParam.getManualContent(), tblParameters.getSelectedRow(), 1);
            }else{
                if(owlsParam.getParamConnected().size() > 0){
                    String paramsConnected = "";
                    for(OWLSParam paramConnected : owlsParam.getParamConnected()){
                        paramsConnected = paramsConnected + "|" + paramConnected.getParamName();
                    }

                    if(paramsConnected.contains("|")){
                        paramsConnected = paramsConnected.substring(1, paramsConnected.length());
                    }

                    model.setValueAt(paramsConnected, tblParameters.getSelectedRow(), 1);            
                }else{
                    model.setValueAt("", tblParameters.getSelectedRow(), 1);
                }
            }
        }
    }
    
    /*
     * Primeiro Caso: Serviço Inicial e seus Inputs
     * OU
     * Quinto Caso: Serviço Final e seus Outputs
     */
    private void firstOrFifthCase(boolean isFirstCase){
        
        DefaultTableModel model = (DefaultTableModel) tblParameters.getModel();
            
        CompositionTaskModel compositionTaskModel = this.compositionModel.getLstServices().get(cmbTasks.getSelectedIndex());
        OWLSOperation operation = compositionTaskModel.getOperation();

        OWLSParam owlsParam = (OWLSParam) model.getValueAt(tblParameters.getSelectedRow(), 0);
        owlsParam.setParentName(operation.getOperationName() + " - " + compositionTaskModel.getTaskCode());
        
        if(owlsParam != null){
            
            FPutParameters frmPutParameters = new FPutParameters(null, true, operation.getOperationName(), owlsParam, isFirstCase);
            frmPutParameters.setVisible(true);
            
            if(!owlsParam.getManualContent().equals("")){
                model.setValueAt(owlsParam.getManualContent().equals("") ? "" : "[Manual Value] - " + owlsParam.getManualContent(), tblParameters.getSelectedRow(), 1);                
            }else{
                if(owlsParam.getParamConnected().size() > 0){
                    String paramsConnected = "|";
                    for(OWLSParam paramConnected : owlsParam.getParamConnected()){
                        paramsConnected = paramsConnected + paramConnected.getParamName() + "|";
                    }

                    if(paramsConnected.contains("|")){
                        paramsConnected = paramsConnected.substring(1, paramsConnected.length());
                    }

                    model.setValueAt(paramsConnected, tblParameters.getSelectedRow(), 1);
                }else{
                    model.setValueAt("", tblParameters.getSelectedRow(), 1);
                }
            }
        }
    }
    
    /*
     * Segundo Caso: Serviço Inicial e seus Outputs
     * OU
     * Quarto Caso: Outputs de qualquer serviço
     */
    private void secondOrFourthCase(){
        DefaultTableModel model = (DefaultTableModel) tblParameters.getModel();
            
        CompositionTaskModel compositionTaskModel = this.compositionModel.getLstServices().get(cmbTasks.getSelectedIndex());
        OWLSOperation operation = compositionTaskModel.getOperation();

        OWLSParam owlsParam = (OWLSParam) model.getValueAt(tblParameters.getSelectedRow(), 0);

        owlsParam.setParentName(operation.getOperationName() + " - " + compositionTaskModel.getTaskCode());
        
        if(owlsParam != null){
            
            List<OWLSParam> lstNextParam = new ArrayList<>();
            StringTokenizer strTokenizer = new StringTokenizer(compositionTaskModel.getNextTasks(), "|");
            while(strTokenizer.hasMoreTokens()){
                String task = strTokenizer.nextToken();
                
                for(int i = 0; i < this.compositionModel.getLstServices().size(); i++){
                    if(this.compositionModel.getLstServices().get(i).getOperation().getOperationName().equals(task.trim())){
                        CompositionTaskModel compositionNextTaskModel = this.compositionModel.getLstServices().get(i);                        
                        
                        for(OWLSParam nextParam : compositionNextTaskModel.getOperation().getInputs()){
                        
                            if(SemanticManager.getInstance().getCompositionManager().compareSingleService(owlsParam, nextParam)){
                                if(nextParam.getParamConnected().isEmpty()){
                                    nextParam.setParentName(task + " - " + compositionNextTaskModel.getTaskCode());
                                    lstNextParam.add(nextParam);
                                }
                            }
                        }
                    }
                }
            }
            
            FPutParameters frmPutParameters = new FPutParameters(null, true, operation.getOperationName(), owlsParam, lstNextParam, false);
            frmPutParameters.setVisible(true);
            
            if(!owlsParam.getManualContent().equals("")){
                model.setValueAt("[Manual Value] - " + owlsParam.getManualContent(), tblParameters.getSelectedRow(), 1);                
            }else{        
                if(owlsParam.getParamConnected().size() > 0){
                    String paramsConnected = "";
                    for(OWLSParam paramConnected : owlsParam.getParamConnected()){
                        paramsConnected = paramsConnected + "|" + paramConnected.getParamName();
                    }

                    if(paramsConnected.contains("|")){
                        paramsConnected = paramsConnected.substring(1, paramsConnected.length());
                    }

                    model.setValueAt(paramsConnected, tblParameters.getSelectedRow(), 1);
                }else{
                    model.setValueAt("", tblParameters.getSelectedRow(), 1);
                }
            }
        }
    }
        
    private int buscarIndexTabela(CompositionTaskModel taskModel){
        
        for(int i = 0; i < tblTask.getRowCount(); i++){
            
            if(tblTask.getModel().getValueAt(i, 2) != null){
                if(tblTask.getModel().getValueAt(i, 2).toString().equals(taskModel.getOperation().getOperationName())){
                    return i;
                }   
            } 
        }
        
        return -1;
    }
    
    private void preencherConnectores(OWLSOperation operation, DefaultTableModel model, CompositionTaskModel taskModel){
        
        int taskIndex = this.buscarIndexTabela(taskModel);
        
        if(taskIndex == -1){
            JOptionPane.showMessageDialog(null, "There are with the index of task's table.", ".: e-ScienceNet :.", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        for(OWLSParam input : operation.getInputs()){
            
            if(!input.getConnectorAssociated().isEmpty()){
                
                ImageIcon content = new ImageIcon(getClass().getResource("/images/port-icon16.png"));
                ImageIcon info = new ImageIcon(getClass().getResource("/images/information-icon.png"));

                for(int i = 0; i < input.getConnectorAssociated().size(); i++){
                
                    Object[] linha = {content,
                                      taskModel.getTask(),
                                      input.getConnectorAssociated().get(i),
                                      "-",
                                      "-",
                                      (input.getConnectorAssociated().get(i).getServiceDescription().equals("") ? null : info)};

                    model.insertRow(taskIndex, linha);
                    taskIndex++;
                }
            }
        }
        
        for(OWLSParam output : operation.getOutputs()){
            
            if(!output.getConnectorAssociated().isEmpty()){
               
                ImageIcon content = new ImageIcon(getClass().getResource("/images/port-icon16.png"));
                ImageIcon info = new ImageIcon(getClass().getResource("/images/information-icon.png"));

                for(int i = 0; i < output.getConnectorAssociated().size(); i++){
                    Object[] linha = {content,
                                      taskModel.getTask(),
                                      output.getConnectorAssociated().get(i),
                                      "-",
                                      "-",
                                      (output.getConnectorAssociated().get(i).getServiceDescription().equals("") ? null : info)};

                    model.addRow(linha);
                }
            }
        }        
    }
    
    private void limparTabela(JTable tabela){
        
        DefaultTableModel defaultTableModel = (DefaultTableModel) tabela.getModel();
                
        while (defaultTableModel.getRowCount() != 0){         
            defaultTableModel.removeRow(0);            
        }        
    }
    
    private CompositionTaskModel getTaskModel(){        
        return ((cmbTasks.getSelectedIndex() != -1) ? this.compositionModel.getLstServices().get(cmbTasks.getSelectedIndex()) : null);
    }
    
    private void preencherComboTask(){
        for(CompositionTaskModel compositionTaskModel : this.compositionModel.getLstServices()){
            cmbTasks.addItem(compositionTaskModel.getTask() + " - " + compositionTaskModel.getOperation().getOperationName());
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddParam;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnExecution;
    private javax.swing.JButton btnFechar;
    private javax.swing.JButton btnInputConnector;
    private javax.swing.JButton btnLoop;
    private javax.swing.JButton btnSave;
    private javax.swing.JComboBox cmbParameters;
    private javax.swing.JComboBox cmbTasks;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblTask;
    private javax.swing.JPanel pnlFooter;
    private javax.swing.JTable tblParameters;
    private javax.swing.JTable tblTask;
    // End of variables declaration//GEN-END:variables

    public class JTableRenderer extends DefaultTableCellRenderer  {    
    
        @Override
        protected void setValue(Object value){    

            if (value instanceof ImageIcon){    

                if (value != null){    
                    ImageIcon d = (ImageIcon) value;    
                    setText("");
                    setIcon(d);
                } else{    
                    setText(""); 
                    setIcon(null); 
                    this.setFont(this.getFont().deriveFont(16));
                }    

            } else {    
                super.setValue(value);    
                setIcon(null);
            }                           
            
            this.setHorizontalAlignment(CENTER);
        }
    }
}
